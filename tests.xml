<?xml version="1.0"?>
<ct:Tests xmlns:ct="http://www.stcorp.nl/coda/test/2008/10" last-modified="2019-08-13">
  <ct:Test name="AcquisitionStationValid" description="Acquisition station must be Kiruna" criticality="Warning"><![CDATA[rtrim(str(.)) == "Kiruna"]]></ct:Test>
  <ct:Test name="AttributeL1bProcessingQualityHrMustExist" description="Existence of Attribute l1b_processing_quality_hr is mandatory" criticality="Warning"><![CDATA[exists(@l1b_processing_quality_hr)]]></ct:Test>
  <ct:Test name="AttributeL1bProcFlagHrMustExist" description="Existence of Attribute l1b_proc_flag_hr is mandatory" criticality="Warning"><![CDATA[exists(@l1b_proc_flag_hr)]]></ct:Test>
  <ct:Test name="AttributeL1bProcThreshHrMustExist" description="Existence of Attribute l1b_proc_thresh_hr is mandatory" criticality="Warning"><![CDATA[exists(@l1b_proc_thresh_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefCal1HrMustExist" description="Existence of Attribute xref_cal1_hr is mandatory" criticality="Warning"><![CDATA[exists(@xref_cal1_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefCal1SarinMustExist" description="Existence of Attribute xref_cal1_sarin is mandatory" criticality="Warning"><![CDATA[exists(@xref_cal1_sarin)]]></ct:Test>
  <ct:Test name="AttributeXrefCal2HrMustExist" description="Existence of Attribute xref_cal2_hr is mandatory" criticality="Warning"><![CDATA[exists(@xref_cal2_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefDemMustExist" description="Existence of Attribute xref_dem is mandatory" criticality="Warning"><![CDATA[exists(@xref_dem)]]></ct:Test>
  <ct:Test name="AttributeXrefGimMustExist" description="Existence of Attribute xref_gim is mandatory" criticality="Warning"><![CDATA[exists(@xref_gim)]]></ct:Test>
  <ct:Test name="AttributeXrefGpdWtcMustExist" description="Existence of Attribute xref_gpd_wtc is mandatory" criticality="Warning"><![CDATA[exists(@xref_gpd_wtc)]]></ct:Test>
  <ct:Test name="AttributeXrefMeanPressureMustExist" description="Existence of Attribute xref_mean_pressure is mandatory" criticality="Warning"><![CDATA[exists(@xref_mean_pressure)]]></ct:Test>
  <ct:Test name="AttributeXrefMog2DMustExist" description="Existence of Attribute xref_mog2d is mandatory" criticality="Warning"><![CDATA[exists(@xref_mog2d)]]></ct:Test>
  <ct:Test name="AttributeXrefOrbitHrMustExist" description="Existence of Attribute xref_orbit_hr is mandatory" criticality="Warning"><![CDATA[exists(@xref_orbit_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefSeaIceMustExist" description="Existence of Attribute xref_sea_ice is mandatory" criticality="Warning"><![CDATA[exists(@xref_sea_ice)]]></ct:Test>
  <ct:Test name="AttributeXrefSiralCharacterisationHrMustExist" description="Existence of Attribute xref_siral_characterisation_hr is mandatory" criticality="Warning"><![CDATA[exists(@xref_siral_characterisation_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefSiralL0HrMustExist" description="Existence of Attribute xref_siral_l0_hr is mandatory" criticality="Warning"><![CDATA[exists(@xref_siral_l0_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefSiralL2MustExist" description="Existence of Attribute xref_siral_l2 is mandatory" criticality="Warning"><![CDATA[exists(@xref_siral_l2)]]></ct:Test>
  <ct:Test name="AttributeXrefSlopeModelMustExistOverContinentalIce" description="Existence of Attribute xref_slope_model is mandatory when measuring over continental ice" criticality="Warning"><![CDATA[int(@continent_ice_percent[0]) == 0 || exists(@xref_slope_model)]]></ct:Test>
  <ct:Test name="AttributeXrefSnowDepthMustExist" description="Existence of Attribute xref_snow_depth is mandatory" criticality="Warning"><![CDATA[exists(@xref_snow_depth)]]></ct:Test>
  <ct:Test name="AttributeXrefSsbMustExistOverOpenOcean" description="Existence of Attribute xref_ssb is mandatory when measuring over open ocean" criticality="Warning"><![CDATA[int(@open_ocean_percent[0]) == 0 || exists(@xref_ssb)]]></ct:Test>
  <ct:Test name="AttributeXrefStarTracker0MustExist" description="Existence of Attribute xref_star_tracker_0 is mandatory" criticality="Warning"><![CDATA[exists(@xref_star_tracker_0)]]></ct:Test>
  <ct:Test name="AttributeXrefStarTrackerAttcopMustExist" description="Existence of Attribute xref_star_tracker_attcop is mandatory" criticality="Warning"><![CDATA[exists(@xref_star_tracker_attcop)]]></ct:Test>
  <ct:Test name="AttributeXrefSurfPressureMustExist" description="Existence of Attribute xref_surf_pressure is mandatory" criticality="Warning"><![CDATA[exists(@xref_surf_pressure)]]></ct:Test>
  <ct:Test name="AttributeXrefUsoHrMustExist" description="Existence of Attribute xref_uso_hr is mandatory" criticality="Warning"><![CDATA[exists(@xref_uso_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefUWindMustExist" description="Existence of Attribute xref_u_wind is mandatory" criticality="Warning"><![CDATA[exists(@xref_u_wind)]]></ct:Test>
  <ct:Test name="AttributeXrefVWindMustExist" description="Existence of Attribute xref_v_wind is mandatory" criticality="Warning"><![CDATA[exists(@xref_v_wind)]]></ct:Test>
  <ct:Test name="AttributeXrefWetTropMustExist" description="Existence of Attribute xref_wet_trop is mandatory" criticality="Warning"><![CDATA[exists(@xref_wet_trop)]]></ct:Test>
  <ct:Test name="AttributeXrefWindModelMustExistOverOpenOcean" description="Existence of Attribute xref_wind_model is mandatory when measuring over open ocean" criticality="Warning"><![CDATA[int(@open_ocean_percent[0]) == 0 || exists(@xref_wind_model)]]></ct:Test>
  <ct:Test name="AttributeL1bProcessingQualityHrMustNotExist" description="Existence of Attribute l1b_processing_quality_hr must not occur" criticality="Warning"><![CDATA[!exists(@l1b_processing_quality_hr)]]></ct:Test>
  <ct:Test name="AttributeL1bProcFlagHrMustNotExist" description="Existence of Attribute l1b_proc_flag_hr must not occur" criticality="Warning"><![CDATA[!exists(@l1b_proc_flag_hr)]]></ct:Test>
  <ct:Test name="AttributeL1bProcThreshHrMustNotExist" description="Existence of Attribute l1b_proc_thresh_hr must not occur" criticality="Warning"><![CDATA[!exists(@l1b_proc_thresh_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefCal1HrMustNotExist" description="Existence of Attribute xref_cal1_hr must not occur" criticality="Warning"><![CDATA[!exists(@xref_cal1_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefCal1SarinMustNotExist" description="Existence of Attribute xref_cal1_sarin must not occur" criticality="Warning"><![CDATA[!exists(@xref_cal1_sarin)]]></ct:Test>
  <ct:Test name="AttributeXrefCal2HrMustNotExist" description="Existence of Attribute xref_cal2_hr must not occur" criticality="Warning"><![CDATA[!exists(@xref_cal2_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefDemMustNotExist" description="Existence of Attribute xref_dem must not occur" criticality="Warning"><![CDATA[!exists(@xref_dem)]]></ct:Test>
  <ct:Test name="AttributeXrefGimMustNotExist" description="Existence of Attribute xref_gim must not occur" criticality="Warning"><![CDATA[!exists(@xref_gim)]]></ct:Test>
  <ct:Test name="AttributeXrefGpdWtcMustNotExist" description="Existence of Attribute xref_gpd_wtc must not occur" criticality="Warning"><![CDATA[!exists(@xref_gpd_wtc)]]></ct:Test>
  <ct:Test name="AttributeXrefMeanPressureMustNotExist" description="Existence of Attribute xref_mean_pressure must not occur" criticality="Warning"><![CDATA[!exists(@xref_mean_pressure)]]></ct:Test>
  <ct:Test name="AttributeXrefMog2DMustNotExist" description="Existence of Attribute xref_mog2d must not occur" criticality="Warning"><![CDATA[!exists(@xref_mog2d)]]></ct:Test>
  <ct:Test name="AttributeXrefOrbitHrMustNotExist" description="Existence of Attribute xref_orbit_hr must not occur" criticality="Warning"><![CDATA[!exists(@xref_orbit_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefSeaIceMustNotExist" description="Existence of Attribute xref_sea_ice must not occur" criticality="Warning"><![CDATA[!exists(@xref_sea_ice)]]></ct:Test>
  <ct:Test name="AttributeXrefSiralCharacterisationHrMustNotExist" description="Existence of Attribute xref_siral_characterisation_hr must not occur" criticality="Warning"><![CDATA[!exists(@xref_siral_characterisation_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefSiralL0HrMustNotExist" description="Existence of Attribute xref_siral_l0_hr must not occur" criticality="Warning"><![CDATA[!exists(@xref_siral_l0_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefSiralL2MustNotExist" description="Existence of Attribute xref_siral_l2 must not occur" criticality="Warning"><![CDATA[!exists(@xref_siral_l2)]]></ct:Test>
  <ct:Test name="AttributeXrefSlopeModelMustNotExist" description="Existence of Attribute xref_slope_model must not occur" criticality="Warning"><![CDATA[!exists(@xref_slope_model)]]></ct:Test>
  <ct:Test name="AttributeXrefSnowDepthMustNotExist" description="Existence of Attribute xref_snow_depth must not occur" criticality="Warning"><![CDATA[!exists(@xref_snow_depth)]]></ct:Test>
  <ct:Test name="AttributeXrefSsbMustNotExist" description="Existence of Attribute xref_ssb is must not occur" criticality="Warning"><![CDATA[!exists(@xref_ssb)]]></ct:Test>
  <ct:Test name="AttributeXrefStarTracker0MustNotExist" description="Existence of Attribute xref_star_tracker_0 must not occur" criticality="Warning"><![CDATA[!exists(@xref_star_tracker_0)]]></ct:Test>
  <ct:Test name="AttributeXrefStarTrackerAttcopMustNotExist" description="Existence of Attribute xref_star_tracker_attcop must not occur" criticality="Warning"><![CDATA[!exists(@xref_star_tracker_attcop)]]></ct:Test>
  <ct:Test name="AttributeXrefSurfPressureMustNotExist" description="Existence of Attribute xref_surf_pressure must not occur" criticality="Warning"><![CDATA[!exists(@xref_surf_pressure)]]></ct:Test>
  <ct:Test name="AttributeXrefUsoHrMustNotExist" description="Existence of Attribute xref_uso_hr must not occur" criticality="Warning"><![CDATA[!exists(@xref_uso_hr)]]></ct:Test>
  <ct:Test name="AttributeXrefUWindMustNotExist" description="Existence of Attribute xref_u_wind must not occur" criticality="Warning"><![CDATA[!exists(@xref_u_wind)]]></ct:Test>
  <ct:Test name="AttributeXrefVWindMustNotExist" description="Existence of Attribute xref_v_wind must not occur" criticality="Warning"><![CDATA[!exists(@xref_v_wind)]]></ct:Test>
  <ct:Test name="AttributeXrefWetTropMustNotExist" description="Existence of Attribute xref_wet_trop must not occur" criticality="Warning"><![CDATA[!exists(@xref_wet_trop)]]></ct:Test>
  <ct:Test name="AttributeXrefWindModelMustNotExist" description="Existence of Attribute xref_wind_model must not occur" criticality="Warning"><![CDATA[!exists(@xref_wind_model)]]></ct:Test>
  <ct:Test name="BurstCounterStepTOD" description="The burst counter should be one higher with regard to the previous burst counter" criticality="Warning"><![CDATA[if(index(..) == 0, index(../../..) == 0 || int(../meas_conf_flags/blnk_blk) == 1 || int(../../../..[index(:/../../..) - 1]/time_orb_data[19]/meas_conf_flags/blnk_blk) == 1 || int(.) == int(../../../..[index(:/../../..) - 1]/time_orb_data[19]/burst_count) + 1, int(../meas_conf_flags/blnk_blk) == 1 || int(../..[index(:/..) - 1]/meas_conf_flags/blnk_blk) == 1 || int(.) == int(../..[index(:/..) - 1]/burst_count) + 1)]]></ct:Test>
  <ct:Test name="BurstCounterStep20HzNetCDF" description="The burst counter should be one higher with regard to the previous burst counter" criticality="Warning"><![CDATA[index(:) == 0 || int(.) - int(..[index(:)-1]) == 1]]></ct:Test>
  <ct:Test name="ClockStepValid" description="Clock step must be all zeroes for Cryosat" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="DSDTotalSize" description="The total dataset size should equal the DSR size times the number of DSRs" criticality="Error"><![CDATA[int(.) == int(../num_dsr) * int(../dsr_size)]]></ct:Test>
  <ct:Test name="DSDTypeMDSR" description="The DSD type should be M for DSDs that refer to measurement datasets" criticality="Error"><![CDATA[str(.) == "M"]]></ct:Test>
  <ct:Test name="EnumDSDType" description="The DSD type should be either M, G, or R" criticality="Error"><![CDATA[str(.) == "M" || str(.) == "G" || str(.) == "R"]]></ct:Test>
  <ct:Test name="EnumDSDTypeWithSpare" description="The DSD type should be either 'M', 'G', 'R' or ' '" criticality="Error"><![CDATA[str(.) == "M" || str(.) == "G" || str(.) == "R" || str(.) == " "]]></ct:Test>
  <ct:Test name="EnumFlag" description="The Flag field should be either 0 or 1" criticality="Error"><![CDATA[int(.) == 0 || int(.) == 1]]></ct:Test>
  <ct:Test name="EnumFlagNetCDF" description="The Flag field should be either 0 or 1 - NetCDF" criticality="Error"><![CDATA[str(.) == "0" || str(.) == "1"]]></ct:Test>
  <ct:Test name="EnumOrbitAscendingFlag" description="The orbit ascending flag should be either A or D" criticality="Error"><![CDATA[str(.) == "A" || str(.) == "D"]]></ct:Test>
  <ct:Test name="EnumOrbitVectorSource" description="orbit vector source should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "FP" || str(.) == "DN" || str(.) == "DP" || str(.) == "FR" || str(.) == "DI"]]></ct:Test>
  <ct:Test name="EnumOrbitVectorSourceNetCDF" description="orbit vector source should match one of the allowed enumeration values - NetCDF" criticality="Error"><![CDATA[str(.) == "fos_predicted" || str(.) == "doris_navigator" || str(.) == "doris_precise" || str(.) == "fos_restituted" || str(.) == "doris_preliminary"]]></ct:Test>
  <ct:Test name="EnumSiralConfiguration" description="The siral configuration should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "RX_1   " || str(.) == "RX_2   " || str(.) == "BOTH   " || str(.) == "UNKNOWN"]]></ct:Test>
  <ct:Test name="EnumSiralConfigurationUnderscore" description="The siral configuration should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "RX_1___" || str(.) == "RX_2___" || str(.) == "BOTH___" || str(.) == "UNKNOWN"]]></ct:Test>
  <ct:Test name="EnumSiralConfigurationKnown" description="The siral configuration should match one of the allowed enumeration values 'RX_1   ', RX_2   ' or 'BOTH   '" criticality="Error"><![CDATA[str(.) == "RX_1   " || str(.) == "RX_2   " || str(.) == "BOTH   "]]></ct:Test>
  <ct:Test name="EnumSiralConfigurationKnownUnderscore" description="The siral configuration should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "RX_1___" || str(.) == "RX_2___" || str(.) == "BOTH___"]]></ct:Test>
  <ct:Test name="EnumSiralOperativeMode" description="The siral operative mode should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "LRM       " || str(.) == "SAR       " || str(.) == "SARIN     " || str(.) == "CAL1_LRM  " || str(.) == "CAL1_SAR  " || str(.) == "CAL1_SARIN" || str(.) == "CAL2_SAR  " || str(.) == "CAL2_SARIN" || str(.) == "CAL3      " || str(.) == "ACQ       " || str(.) == "TRK_SAR   " || str(.) == "TRK_SARIN " || str(.) == "CAL4      "]]></ct:Test>
  <ct:Test name="EnumSiralOperativeModeUnderscore" description="SIRAL operation mode should be LRM, SAR, SARIN, CAL1_LRM, CAL1_SAR, CAL1_SARIN, CAL2_SAR, CAL2_SARIN, TRK_SAR, TRK_SARIN, CAL4" criticality="Warning"><![CDATA[(str(.) == "LRM       " || str(.) == "LRM_______") || (str(.) == "SAR       " || str(.) == "SAR_______") || (str(.) == "SARIN     " || str(.) == "SARIN_____") || (str(.) == "CAL1_LRM  " || str(.) == "CAL1_LRM__") || (str(.) == "CAL1_SAR  " || str(.) == "CAL1_SAR__") || str(.) == "CAL1_SARIN" || (str(.) == "CAL2_SAR  " || str(.) == "CAL2_SAR__") || str(.) == "CAL2_SARIN" || (str(.) == "TRK_SAR   " || str(.) == "TRK_SAR___") || (str(.) == "TRK_SARIN " || str(.) == "TRK_SARIN_") || (str(.) == "CAL4      " || str(.) == "CAL4______")]]></ct:Test>
  <ct:Test name="EnumSiralOperativeModeOPL2NetCDF" description="The siral operative mode should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "LRM       " || str(.) == "SAR       " || str(.) == "SARIN     "]]></ct:Test>
  <ct:Test name="EnumSiralOperativeModeL2NetCDF" description="The siral operative mode should match one of the allowed enumeration values" criticality="Error"><![CDATA[str(.) == "LRM       " || str(.) == "SAR       " || str(.) == "SARIN     " || trim(str(.)) == "" ]]></ct:Test>
  <ct:Test name="FileNameCheckProductName" description="The name of the file should be consistent with the product name in the global attributes" criticality="Warning"><![CDATA[substr(0,55,filename()) == str(.)]]></ct:Test>
  <ct:Test name="FileNameCheckDBL" description="The name of the DBL file should be consistent with the product name in the MPH" criticality="Warning"><![CDATA[filename() == str(., 55) + ".DBL"]]></ct:Test>
  <ct:Test name="FileNameCheckEEF" description="The name of the EEF file should be consistent with the product name in the fixed header" criticality="Warning"><![CDATA[filename() == str(., 55) + ".EEF"]]></ct:Test>
  <ct:Test name="FileNameCheckHDR" description="The name of the HDR file should be consistent with the product name in the fixed header" criticality="Warning"><![CDATA[filename() == str(., 55) + ".HDR"]]></ct:Test>
  <ct:Test name="FileClassCheckL0" description="The class of the Level 0 file should be one of Routine Operations, Test Data Set" criticality="Error"><![CDATA[str(.) == "Routine Operations" || str(.) == "Test Data Set"]]></ct:Test>
  <ct:Test name="FileClassCheckL1" description="The class of the Level 1 file should be one of Off-Line Processing, Near-Real-Time Processing, General Test File, Long Term Archive" criticality="Error"><![CDATA[str(.) == "Off-Line Processing" || str(.) == "Near-Real-Time Processing" || str(.) == "General Test File" || str(.) == "Long Term Archive" ]]></ct:Test>
  <ct:Test name="FileClassCheckL2" description="The class of the Level 1 file should be one of Off-Line Processing, Near-Real-Time Processing, General Test File, Long Term Archive" criticality="Error"><![CDATA[str(.) == "Off-Line Processing" || str(.) == "Near-Real-Time Processing" || str(.) == "General Test File" || str(.) == "Long Term Archive" ]]></ct:Test>
  <ct:Test name="FileNameChecknc" description="The name of the nc file should be consistent with the product name in the global attributes" criticality="Warning"><![CDATA[filename() == str(., 55) + ".nc"]]></ct:Test>
  <ct:Test name="FileNameMatchFileClass" description="The class of the file should be consistent with the product name" criticality="Error"><![CDATA[(substr(3, 4, str(../File_Name)) == "OPER" && str(.) == "Routine Operations") || (substr(3, 4, str(../File_Name)) == "LTA_" && str(.) == "Long Term Archive") || (substr(3, 4, str(../File_Name)) == "LTA_" && str(.) == "LTA Reprocessed Files") || (substr(3, 4, str(../File_Name)) == "NRT_" && str(.) == "Near-Real-Time Processing") || (substr(3, 4, str(../File_Name)) == "OFFL" && str(.) == "Off-Line Processing") || (substr(3, 4, str(../File_Name)) == "RPRO" && str(.) == "Re-Processing") || (substr(3, 4, str(../File_Name)) == "TEST" && str(.) == "Test Data Set") || (substr(3, 4, str(../File_Name)) == "TEST" && str(.) == "General Test File") || (substr(3, 4, str(../File_Name)) == "SVT1" && str(.) == "Satellite Validation Test 1") || (substr(3, 4, str(../File_Name)) == "SVT2" && str(.) == "Satellite Validation Test 2") || (substr(3, 4, str(../File_Name)) == "SVT3" && str(.) == "Satellite Validation Test 3") || (substr(3, 4, str(../File_Name)) == "SVT4" && str(.) == "Satellite Validation Test 4")]]></ct:Test>
  <ct:Test name="FileNameMatchValidityStart" description="The validity start time in the product name should be consistent with the validity start time field in the header" criticality="Error"><![CDATA[substr(19, 15, str(.)) == substr(4, 4, str(../Validity_Period/Validity_Start)) + substr(9, 2, str(../Validity_Period/Validity_Start)) + substr(12, 5, str(../Validity_Period/Validity_Start)) + substr(18, 2, str(../Validity_Period/Validity_Start)) + substr(21, 2, str(../Validity_Period/Validity_Start))]]></ct:Test>
  <ct:Test name="FileNameMatchValidityStop" description="The validity stop time in the product name should be consistent with the validity stop time field in the header" criticality="Error"><![CDATA[substr(35, 15, str(.)) == substr(4, 4, str(../Validity_Period/Validity_Stop)) + substr(9, 2, str(../Validity_Period/Validity_Stop)) + substr(12, 5, str(../Validity_Period/Validity_Stop)) + substr(18, 2, str(../Validity_Period/Validity_Stop)) + substr(21, 2, str(../Validity_Period/Validity_Stop))]]></ct:Test>
  <ct:Test name="FileNameMatchFileType" description="The type of the file should be consistent with the product name" criticality="Error"><![CDATA[substr(8, 10, str(.)) == str(../File_Type)]]></ct:Test>
  <ct:Test name="FileNameMatchFileVersion" description="The version of the file should be consistent with the product name" criticality="Error"><![CDATA[int(substr(52, 3, str(.))) == int(../File_Version)]]></ct:Test>
  <ct:Test name="FixedValue0" description="The value of this field should be 0" criticality="Error"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="FixedValueInstrumentIDA" description="The instrument ID should be 'A'" criticality="Error"><![CDATA[str(.) == "A"]]></ct:Test>
  <ct:Test name="FixedValueAUX_IONGIM" description="The value should be 'AUX_IONGIM'" criticality="Error"><![CDATA[str(.) == "AUX_IONGIM"]]></ct:Test>
  <ct:Test name="FixedValueAUX_ORBDOP" description="The value should be 'AUX_ORBDOP'" criticality="Error"><![CDATA[str(.) == "AUX_ORBDOP"]]></ct:Test>
  <ct:Test name="FixedValueAUX_ORBDOR" description="The value should be 'AUX_ORBDOR'" criticality="Error"><![CDATA[str(.) == "AUX_ORBDOR"]]></ct:Test>
  <ct:Test name="FixedValueAUX_PAR_QC" description="The value should be 'AUX_PAR_QC'" criticality="Error"><![CDATA[str(.) == "AUX_PAR_QC"]]></ct:Test>
  <ct:Test name="FixedValueAUX_REP_QC" description="The value should be 'AUX_REP_QC'" criticality="Error"><![CDATA[str(.) == "AUX_REP_QC"]]></ct:Test>
  <ct:Test name="FixedValueAUX_SUNACT" description="The value should be 'AUX_SUNACT'" criticality="Error"><![CDATA[str(.) == "AUX_SUNACT"]]></ct:Test>
  <ct:Test name="FixedValueCryoSat" description="The value should be 'CryoSat'" criticality="Error"><![CDATA[str(.) == "CryoSat"]]></ct:Test>
  <ct:Test name="FixedValueDI" description="The value should be 'DI'" criticality="Error"><![CDATA[str(.) == "DI"]]></ct:Test>
  <ct:Test name="FixedValueDorisPreliminary" description="The value should be 'doris_preliminary'" criticality="Error"><![CDATA[str(.) == "doris_preliminary"]]></ct:Test>
  <ct:Test name="FixedValueDN" description="The value should be 'DN'" criticality="Error"><![CDATA[str(.) == "DN"]]></ct:Test>
  <ct:Test name="FixedValueDorisNavigator" description="The value should be 'doris_navigator'" criticality="Error"><![CDATA[str(.) == "doris_navigator"]]></ct:Test>
  <ct:Test name="FixedValueDP" description="The value should be 'DP'" criticality="Error"><![CDATA[str(.) == "DP"]]></ct:Test>
  <ct:Test name="FixedValueDorisPrecise" description="The value should be 'doris_precise'" criticality="Error"><![CDATA[str(.) == "doris_precise"]]></ct:Test>
  <ct:Test name="FixedValueDOR_DAT_0_" description="The value should be 'DOR_DAT_0_'" criticality="Error"><![CDATA[str(.) == "DOR_DAT_0_"]]></ct:Test>
  <ct:Test name="FixedValueDOR_DMP_0_" description="The value should be 'DOR_DMP_0_'" criticality="Error"><![CDATA[str(.) == "DOR_DMP_0_"]]></ct:Test>
  <ct:Test name="FixedValueDOR_DOP_0_" description="The value should be 'DOR_DOP_0_'" criticality="Error"><![CDATA[str(.) == "DOR_DOP_0_"]]></ct:Test>
  <ct:Test name="FixedValueDOR_JAM_0_" description="The value should be 'DOR_JAM_0_'" criticality="Error"><![CDATA[str(.) == "DOR_JAM_0_"]]></ct:Test>
  <ct:Test name="FixedValueDOR_NAV_0_" description="The value should be 'DOR_NAV_0_'" criticality="Error"><![CDATA[str(.) == "DOR_NAV_0_"]]></ct:Test>
  <ct:Test name="FixedValueDOR_TST_0_" description="The value should be 'DOR_TST_0_'" criticality="Error"><![CDATA[str(.) == "DOR_TST_0_"]]></ct:Test>
  <ct:Test name="FixedValueL0_Processor" description="The value should be 'L0_Processor'" criticality="Warning"><![CDATA[str(.) == "L0_Processor"]]></ct:Test>
  <ct:Test name="FixedValueMPL_ORBLPR" description="The value should be 'MPL_ORBLPR'" criticality="Error"><![CDATA[str(.) == "MPL_ORBLPR"]]></ct:Test>
  <ct:Test name="FixedValueMPL_ORBPRE" description="The value should be 'MPL_ORBPRE'" criticality="Error"><![CDATA[str(.) == "MPL_ORBPRE"]]></ct:Test>
  <ct:Test name="FixedValueMPL_ORBREF" description="The value should be 'MPL_ORBREF'" criticality="Error"><![CDATA[str(.) == "MPL_ORBREF"]]></ct:Test>
  <ct:Test name="FixedValuePDS" description="The value should be 'PDS'" criticality="Warning"><![CDATA[str(.) == "PDS"]]></ct:Test>
  <ct:Test name="FixedValueSAT_HKTM__" description="The value should be 'SAT_HKTM__'" criticality="Error"><![CDATA[str(.) == "SAT_HKTM__"]]></ct:Test>
  <ct:Test name="FixedValueSIR_FDM_1B" description="The value should be 'SIR_FDM_1B'" criticality="Error"><![CDATA[str(.) == "SIR_FDM_1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_FDM_2_" description="The value should be 'SIR_FDM_2_'" criticality="Error"><![CDATA[str(.) == "SIR_FDM_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_FDMI2_" description="The value should be 'SIR_FDMI2_'" criticality="Error"><![CDATA[str(.) == "SIR_FDMI2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GDR_2_" description="The value should be 'SIR_GDR_2_'" criticality="Error"><![CDATA[str(.) == "SIR_GDR_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GDR_2A" description="The value should be 'SIR_GDR_2A'" criticality="Error"><![CDATA[str(.) == "SIR_GDR_2A"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GDR_2B" description="The value should be 'SIR_GDR_2B'" criticality="Error"><![CDATA[str(.) == "SIR_GDR_2B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOP_1B" description="The value should be 'SIR_GOP_1B'" criticality="Error"><![CDATA[str(.) == "SIR_GOP_1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOP_2_" description="The value should be 'SIR_GOP_2_'" criticality="Error"><![CDATA[str(.) == "SIR_GOP_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOP_1B" description="The value should be 'SIR_IOP_1B'" criticality="Error"><![CDATA[str(.) == "SIR_IOP_1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOP_2_" description="The value should be 'SIR_IOP_2_'" criticality="Error"><![CDATA[str(.) == "SIR_IOP_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_LRM_1B" description="The value should be 'SIR_LRM_1B'" criticality="Error"><![CDATA[str(.) == "SIR_LRM_1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_LRM_2_" description="The value should be 'SIR_LRM_2_'" criticality="Error"><![CDATA[str(.) == "SIR_LRM_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_LRMI2_" description="The value should be 'SIR_LRMI2_'" criticality="Error"><![CDATA[str(.) == "SIR_LRMI2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SAR_1B" description="The value should be 'SIR_SAR_1B'" criticality="Error"><![CDATA[str(.) == "SIR_SAR_1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SAR_2_" description="The value should be 'SIR_SAR_2_'" criticality="Error"><![CDATA[str(.) == "SIR_SAR_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SAR_2A" description="The value should be 'SIR_SAR_2A'" criticality="Error"><![CDATA[str(.) == "SIR_SAR_2A"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SAR_2B" description="The value should be 'SIR_SAR_2B'" criticality="Error"><![CDATA[str(.) == "SIR_SAR_2B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SARI2_" description="The value should be 'SIR_SARI2_'" criticality="Error"><![CDATA[str(.) == "SIR_SARI2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SARI2A" description="The value should be 'SIR_SARI2A'" criticality="Error"><![CDATA[str(.) == "SIR_SARI2A"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SARI2B" description="The value should be 'SIR_SARI2B'" criticality="Error"><![CDATA[str(.) == "SIR_SARI2B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIC11B" description="The value should be 'SIR_SIC11B'" criticality="Error"><![CDATA[str(.) == "SIR_SIC11B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIC40M" description="The value should be 'SIR_SIC40M'" criticality="Error"><![CDATA[str(.) == "SIR_SIC40M"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SICC1B" description="The value should be 'SIR_SICC1B'" criticality="Error"><![CDATA[str(.) == "SIR_SICC1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SID_2_" description="The value should be 'SIR_SID_2_'" criticality="Error"><![CDATA[str(.) == "SIR_SID_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIDI2_" description="The value should be 'SIR_SIDI2_'" criticality="Error"><![CDATA[str(.) == "SIR_SIDI2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIN_0M" description="The value should be 'SIR_SIN_0M'" criticality="Error"><![CDATA[str(.) == "SIR_SIN_0M"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIN_1B" description="The value should be 'SIR_SIN_1B'" criticality="Error"><![CDATA[str(.) == "SIR_SIN_1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIN_2_" description="The value should be 'SIR_SIN_2_'" criticality="Error"><![CDATA[str(.) == "SIR_SIN_2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SIN_FR" description="The value should be 'SIR_SIN_FR'" criticality="Error"><![CDATA[str(.) == "SIR_SIN_FR"]]></ct:Test>
  <ct:Test name="FixedValueSIR_SINI2_" description="The value should be 'SIR_SINI2_'" criticality="Error"><![CDATA[str(.) == "SIR_SINI2_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1ACQ_0_" description="The value should be 'SIR1ACQ_0_'" criticality="Error"><![CDATA[str(.) == "SIR1ACQ_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1LRC10_" description="The value should be 'SIR1LRC10_'" criticality="Error"><![CDATA[str(.) == "SIR1LRC10_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1LRC11B" description="The value should be 'SIR1LRC11B'" criticality="Error"><![CDATA[str(.) == "SIR1LRC11B"]]></ct:Test>
  <ct:Test name="FixedValueSIR1LRM_0_" description="The value should be 'SIR1LRM_0_'" criticality="Error"><![CDATA[str(.) == "SIR1LRM_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1LRM_0M" description="The value should be 'SIR1LRM_0M'" criticality="Error"><![CDATA[str(.) == "SIR1LRM_0M"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAC10_" description="The value should be 'SIR1SAC10_'" criticality="Error"><![CDATA[str(.) == "SIR1SAC10_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAC11B" description="The value should be 'SIR1SAC11B'" criticality="Error"><![CDATA[str(.) == "SIR1SAC11B"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAC20_" description="The value should be 'SIR1SAC20_'" criticality="Error"><![CDATA[str(.) == "SIR1SAC20_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAC21B" description="The value should be 'SIR1SAC21B'" criticality="Error"><![CDATA[str(.) == "SIR1SAC21B"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAR_0_" description="The value should be 'SIR1SAR_0_'" criticality="Error"><![CDATA[str(.) == "SIR1SAR_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAR_0M" description="The value should be 'SIR1SAR_0M'" criticality="Error"><![CDATA[str(.) == "SIR1SAR_0M"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SAR_FR" description="The value should be 'SIR1SAR_FR'" criticality="Error"><![CDATA[str(.) == "SIR1SAR_FR"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SIC10_" description="The value should be 'SIR1SIC10_'" criticality="Error"><![CDATA[str(.) == "SIR1SIC10_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SIC20_" description="The value should be 'SIR1SIC20_'" criticality="Error"><![CDATA[str(.) == "SIR1SIC20_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SIC21B" description="The value should be 'SIR1SIC21B'" criticality="Error"><![CDATA[str(.) == "SIR1SIC21B"]]></ct:Test>
  <ct:Test name="FixedValueSIR1SIN_0_" description="The value should be 'SIR1SIN_0_'" criticality="Error"><![CDATA[str(.) == "SIR1SIN_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1STST0_" description="The value should be 'SIR1STST0_'" criticality="Error"><![CDATA[str(.) == "SIR1STST0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1TKSA0_" description="The value should be 'SIR1TKSA0_'" criticality="Error"><![CDATA[str(.) == "SIR1TKSA0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR1TKSI0_" description="The value should be 'SIR1TKSI0_'" criticality="Error"><![CDATA[str(.) == "SIR1TKSI0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2ACQ_0_" description="The value should be 'SIR2ACQ_0_'" criticality="Error"><![CDATA[str(.) == "SIR2ACQ_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2LRC10_" description="The value should be 'SIR2LRC10_'" criticality="Error"><![CDATA[str(.) == "SIR2LRC10_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2LRC11B" description="The value should be 'SIR2LRC11B'" criticality="Error"><![CDATA[str(.) == "SIR2LRC11B"]]></ct:Test>
  <ct:Test name="FixedValueSIR2LRM_0_" description="The value should be 'SIR2LRM_0_'" criticality="Error"><![CDATA[str(.) == "SIR2LRM_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2LRM_0M" description="The value should be 'SIR2LRM_0M'" criticality="Error"><![CDATA[str(.) == "SIR2LRM_0M"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAC10_" description="The value should be 'SIR2SAC10_'" criticality="Error"><![CDATA[str(.) == "SIR2SAC10_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAC11B" description="The value should be 'SIR2SAC11B'" criticality="Error"><![CDATA[str(.) == "SIR2SAC11B"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAC20_" description="The value should be 'SIR2SAC20_'" criticality="Error"><![CDATA[str(.) == "SIR2SAC20_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAC21B" description="The value should be 'SIR2SAC21B'" criticality="Error"><![CDATA[str(.) == "SIR2SAC21B"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAR_0_" description="The value should be 'SIR2SAR_0_'" criticality="Error"><![CDATA[str(.) == "SIR2SAR_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAR_0M" description="The value should be 'SIR2SAR_0M'" criticality="Error"><![CDATA[str(.) == "SIR2SAR_0M"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SAR_FR" description="The value should be 'SIR2SAR_FR'" criticality="Error"><![CDATA[str(.) == "SIR2SAR_FR"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SIC10_" description="The value should be 'SIR2SIC10_'" criticality="Error"><![CDATA[str(.) == "SIR2SIC10_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SIC20_" description="The value should be 'SIR2SIC20_'" criticality="Error"><![CDATA[str(.) == "SIR2SIC20_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SIC21B" description="The value should be 'SIR2SIC21B'" criticality="Error"><![CDATA[str(.) == "SIR2SIC21B"]]></ct:Test>
  <ct:Test name="FixedValueSIR2SIN_0_" description="The value should be 'SIR2SIN_0_'" criticality="Error"><![CDATA[str(.) == "SIR2SIN_0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2STST0_" description="The value should be 'SIR2STST0_'" criticality="Error"><![CDATA[str(.) == "SIR2STST0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2TKSA0_" description="The value should be 'SIR2TKSA0_'" criticality="Error"><![CDATA[str(.) == "SIR2TKSA0_"]]></ct:Test>
  <ct:Test name="FixedValueSIR2TKSI0_" description="The value should be 'SIR2TKSI0_'" criticality="Error"><![CDATA[str(.) == "SIR2TKSI0_"]]></ct:Test>
  <ct:Test name="FixedValueSTR1ATT_0_" description="The value should be 'STR1ATT_0_'" criticality="Error"><![CDATA[str(.) == "STR1ATT_0_"]]></ct:Test>
  <ct:Test name="FixedValueSTR1DAT_0_" description="The value should be 'STR1DAT_0_'" criticality="Error"><![CDATA[str(.) == "STR1DAT_0_"]]></ct:Test>
  <ct:Test name="FixedValueSTR2ATT_0_" description="The value should be 'STR2ATT_0_'" criticality="Error"><![CDATA[str(.) == "STR2ATT_0_"]]></ct:Test>
  <ct:Test name="FixedValueSTR2DAT_0_" description="The value should be 'STR2DAT_0_'" criticality="Error"><![CDATA[str(.) == "STR2DAT_0_"]]></ct:Test>
  <ct:Test name="FixedValueSTR3ATT_0_" description="The value should be 'STR3ATT_0_'" criticality="Error"><![CDATA[str(.) == "STR3ATT_0_"]]></ct:Test>
  <ct:Test name="FixedValueSTR3DAT_0_" description="The value should be 'STR3DAT_0_'" criticality="Error"><![CDATA[str(.) == "STR3DAT_0_"]]></ct:Test>
  <ct:Test name="FixedValueTLM_STRHK_" description="The value should be 'TLM_STRHK_'" criticality="Error"><![CDATA[str(.) == "TLM_STRHK_"]]></ct:Test>
  <ct:Test name="FixedValueSIR_NOPM1B" description="The value should be 'SIR_NOPM1B'" criticality="Error"><![CDATA[str(.) == "SIR_NOPM1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_NOPR1B" description="The value should be 'SIR_NOPR1B'" criticality="Error"><![CDATA[str(.) == "SIR_NOPR1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_NOPN1B" description="The value should be 'SIR_NOPN1B'" criticality="Error"><![CDATA[str(.) == "SIR_NOPN1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOPM1B" description="The value should be 'SIR_IOPM1B'" criticality="Error"><![CDATA[str(.) == "SIR_IOPM1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOPR1B" description="The value should be 'SIR_IOPR1B'" criticality="Error"><![CDATA[str(.) == "SIR_IOPR1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOPN1B" description="The value should be 'SIR_IOPN1B'" criticality="Error"><![CDATA[str(.) == "SIR_IOPN1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOPM1B" description="The value should be 'SIR_GOPM1B'" criticality="Error"><![CDATA[str(.) == "SIR_GOPM1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOPR1B" description="The value should be 'SIR_GOPR1B'" criticality="Error"><![CDATA[str(.) == "SIR_GOPR1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOPN1B" description="The value should be 'SIR_GOPN1B'" criticality="Error"><![CDATA[str(.) == "SIR_GOPN1B"]]></ct:Test>
  <ct:Test name="FixedValueSIR_NOPM_2" description="The value should be 'SIR_NOPM_2'" criticality="Error"><![CDATA[str(.) == "SIR_NOPM_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_NOPR_2" description="The value should be 'SIR_NOPR_2'" criticality="Error"><![CDATA[str(.) == "SIR_NOPR_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_NOPN_2" description="The value should be 'SIR_NOPN_2'" criticality="Error"><![CDATA[str(.) == "SIR_NOPN_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOPM_2" description="The value should be 'SIR_IOPM_2'" criticality="Error"><![CDATA[str(.) == "SIR_IOPM_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOPR_2" description="The value should be 'SIR_IOPR_2'" criticality="Error"><![CDATA[str(.) == "SIR_IOPR_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_IOPN_2" description="The value should be 'SIR_IOPN_2'" criticality="Error"><![CDATA[str(.) == "SIR_IOPN_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOPM_2" description="The value should be 'SIR_GOPM_2'" criticality="Error"><![CDATA[str(.) == "SIR_GOPM_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOPR_2" description="The value should be 'SIR_GOPR_2'" criticality="Error"><![CDATA[str(.) == "SIR_GOPR_2"]]></ct:Test>
  <ct:Test name="FixedValueSIR_GOPN_2" description="The value should be 'SIR_GOPN_2'" criticality="Error"><![CDATA[str(.) == "SIR_GOPN_2"]]></ct:Test>
  <ct:Test name="IndexOf1Hzin20HzMappingOutOfRange" description="The mapping of 20 Hz to 1 Hz measurements should be in the range 0 to (number of 1 Hz samples - 1)" criticality="Warning"><![CDATA[int(.) >= 0 &&  int(.) < numelements(/time_01)]]></ct:Test>
  <ct:Test name="L0GapsField" description="The level 0 gaps flag should be 1 if and only if the number of gaps is greather than 0 (and 0 otherwise)" criticality="Error"><![CDATA[int(./l0_gaps_flag) == if(int(./l0_gaps_num) > 0, 1, 0)]]></ct:Test>
  <ct:Test name="L0GapsFieldNetCDF" description="The level 0 gaps flag should be 1 if and only if the number of gaps is greather than 0 (and 0 otherwise) - NetCDF" criticality="Error"><![CDATA[int(str(@l0_gaps_flag)) == if(int(@l0_gaps_num[0]) > 0, 1, 0)]]></ct:Test>
  <ct:Test name="L0GapsFlag" description="L0 gaps significance flag should not be set" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="L0GapsFlagNetCDF" description="L0 gaps significance flag should not be set - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="L0ProcFlag" description="L0 processing errors significance flag should not be set" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="L0ProcFlagNetCDF" description="L0 processing errors significance flag should not be set - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="L0ProcQualityFlag" description="L0 processing quality should be higher than level 0 processing quality threshold" criticality="Warning"><![CDATA[float(.) > float(../l0_proc_thresh)]]></ct:Test>
  <ct:Test name="L0ProcQualityFlagNetCDF" description="L0 processing quality should be higher than level 0 processing quality threshold - NetCDF" criticality="Warning"><![CDATA[float(.) > float(/@l0_proc_thresh[0])]]></ct:Test>
  <ct:Test name="L0QualityThreshold" description="The level 0 processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise)" criticality="Error"><![CDATA[int(./l0_proc_flag) == if(int(./l0_processing_quality) < int(./l0_proc_thresh), 1, 0)]]></ct:Test>
  <ct:Test name="L0QualityThresholdNetCDF" description="The level 0 processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise) - NetCDF" criticality="Error"><![CDATA[int(str(@l0_proc_flag)) == if(int(@l0_processing_quality[0]) < int(/@l0_proc_thresh[0]), 1, 0)]]></ct:Test>
  <ct:Test name="L1ProcQuality" description="L1 processing quality should be higher than level 1 processing quality threshold" criticality="Warning"><![CDATA[float(.) > float(../l1_proc_thresh)]]></ct:Test>
  <ct:Test name="L1BProcFlag" description="L1B processing errors significance flag should not be set" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="L1BProcFlagNetCDF" description="L1B processing errors significance flag should not be set - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="L1BProcFlagHRNetCDF" description="L1B HR processing errors significance flag should not be set - NetCDF" criticality="Warning"><![CDATA[!exists(@l1b_proc_flag_hr) || str(@l1b_proc_flag_hr) == "0"]]></ct:Test>
  <ct:Test name="L1BProcQuality" description="L1B processing quality should be higher than level 1B processing quality threshold" criticality="Warning"><![CDATA[float(.) > float(../l1b_proc_thresh)]]></ct:Test>
  <ct:Test name="L1BProcQualityNetCDF" description="L1B processing quality should be higher than level 1B processing quality threshold - NetCDF" criticality="Warning"><![CDATA[float(.) > float(/@l1b_proc_thresh[0])]]></ct:Test>
  <ct:Test name="L1BProcQualityHRNetCDF" description="L1B HR processing quality should be higher than level 1B processing quality threshold - NetCDF" criticality="Warning"><![CDATA[!exists(@l1b_processing_quality_hr) || float(@l1b_processing_quality_hr[0]) > float(@l1b_proc_thresh_hr[0])]]></ct:Test>
  <ct:Test name="L1BProdStatus" description="L1B product status flag should not be set" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="L1BProdStatusNetCDF" description="L1B product status flag should not be set - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="L1BQualityThreshold" description="The level 1b processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise)" criticality="Error"><![CDATA[int(./l1b_proc_flag) == if(int(./l1b_processing_quality) < int(./l1b_proc_thresh), 1, 0)]]></ct:Test>
  <ct:Test name="L1BQualityThresholdNetCDF" description="The level 1b processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise) - NetCDF" criticality="Error"><![CDATA[int(str(@l1b_proc_flag)) == if(int(@l1b_processing_quality[0]) < int(@l1b_proc_thresh[0]), 1, 0)]]></ct:Test>
  <ct:Test name="L1BHRQualityThresholdNetCDF" description="The level 1b HR processing flag should be 1 if and only if the HR quality is less than the given HR threshold (and 0 otherwise) - NetCDF" criticality="Error"><![CDATA[int(str(@l1b_proc_flag_hr)) == if(int(@l1b_processing_quality_hr[0]) < int(@l1b_proc_thresh_hr[0]), 1, 0)]]></ct:Test>
  <ct:Test name="L1QualityThreshold" description="The level 1 processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise)" criticality="Error"><![CDATA[int(./l1_proc_flag) == if(int(./l1_processing_quality) < int(./l1_proc_thresh), 1, 0)]]></ct:Test>
  <ct:Test name="L1QualityThresholdNetCDF" description="The level 1 processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise) - NetCDF" criticality="Error"><![CDATA[int(str(@l1b_proc_flag)) == if(int(@l1b_processing_quality[0]) < int(@l1b_proc_thresh[0]), 1, 0)]]></ct:Test>
  <ct:Test name="L2ProdStatus" description="L2 product status flag should not be set" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="L2ProdStatusNetCDF" description="L2 product status flag should not be set - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="L2ProcFlag" description="L2 processing errors significance flag should not be set" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="L2ProcFlagNetCDF" description="L2 processing errors significance flag should not be set - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="L2ProcQuality" description="L2 processing quality should be higher than level 2 processing quality threshold" criticality="Warning"><![CDATA[float(.) > float(../l2_proc_thresh)]]></ct:Test>
  <ct:Test name="L2ProcQualityNetCDF" description="L1B processing quality should be higher than level 1B processing quality threshold - NetCDF" criticality="Warning"><![CDATA[float(.) > float(/@l2_proc_thresh[0])]]></ct:Test>
  <ct:Test name="L2QualityThreshold" description="The level 2 processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise)" criticality="Error"><![CDATA[int(./l2_proc_flag) == if(int(./l2_processing_quality) < int(./l2_proc_thresh), 1, 0)]]></ct:Test>
  <ct:Test name="L2QualityThresholdNetCDF" description="The level 2 processing flag should be 1 if and only if the quality is less than the given threshold (and 0 otherwise) - NetCDF" criticality="Error"><![CDATA[int(str(@l2_proc_flag)) == if(int(@l2_processing_quality[0]) < int(@l2_proc_thresh[0]), 1, 0)]]></ct:Test>
  <ct:Test name="LeapUtcValid" description="Leap utc should be blank" criticality="Warning"><![CDATA[str(.) == "                           "]]></ct:Test>
  <ct:Test name="LeapUtcValidNetCDF" description="Leap utc should be blank" criticality="Warning"><![CDATA[trim(str(.)) == ""]]></ct:Test>
  <ct:Test name="LeapErrValid" description="Leap error should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="LeapErrValidNetCDF" description="Leap error should be '0'" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="MissingValueShortInt" description="The value should not be a 'missing value'" criticality="Warning"><![CDATA[int(.) != 32767]]></ct:Test>
  <ct:Test name="MissingValueShortIntOcean" description="The value should not be a 'missing value' for surface type 0 only" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) != 32767]]></ct:Test>
  <ct:Test name="MissingValueIntOceanNetCDF" description="The value should not be a 'missing value' for surface type 0 only - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) != int(..@FillValue[0])]]></ct:Test>
  <ct:Test name="MissingValueIntOceanExcludingPolarNetCDF" description="The value should not be a 'missing value' for surface type 0 only for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[float(/lat_01[index(:)]) > 70e7 || float(/lat_01[index(:)]) < -70e7 || int(/surf_type_01[index(:)]) != 0 || int(.) != int(..@FillValue[0])]]></ct:Test>
  <ct:Test name="MissingValueShortIntOceanFD2" description="The value should not be a 'missing value' for surface type 0 only" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) != 32767]]></ct:Test>
  <ct:Test name="MissingValueIntOceanFD2NetCDF" description="The value should not be a 'missing value' for surface type 0 only - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(:)  != int(..@FillValue[0])]]></ct:Test>
  <ct:Test name="MissingValueIntOceanExcludingPolarFD2NetCDF" description="The value should not be a 'missing value' for surface type 0 only for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_ku[index(:)]) > 70e7 || float(/lat_20_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(:)  != int(..@FillValue[0])]]></ct:Test>
  <ct:Test name="MissingValueIntOceanFD2PLRMNetCDF" description="The value should not be a 'missing value' for surface type 0 only - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(:)  != int(..@FillValue[0])]]></ct:Test>
  <ct:Test name="MPHProductMatchesFixedHeader" description="The product name in the MPH should equal the product name in the Fixed Header" criticality="Error"><![CDATA[str(.) == str(../../../Fixed_Header/file_name)]]></ct:Test>
  <ct:Test name="MPHProcStageCodeMatchesFilename" description="The Processing Stage Code in the MPH should be consistent with the file name" criticality="Error"><![CDATA[str(.) == substr(3,4,filename())]]></ct:Test>
  <ct:Test name="MPHProductSize" description="The size reported in the MPH should equal the actual product size" criticality="Error"><![CDATA[int(.) == filesize()]]></ct:Test>
  <ct:Test name="MPHRefDocL0" description="The REF_DOC field in the MPH should have the value 'CS-ID-ACS-GS-0119 03.03'" criticality="Warning"><![CDATA[str(.) == "CS-ID-ACS-GS-0119 03.03"]]></ct:Test>
  <ct:Test name="MPHRefDocL1" description="The REF_DOC field in the MPH should have the value 'CS-RS-ACS-GS-5106 06.00' or 'CS-RS-ACS-ESL-5364 1.8'" criticality="Warning"><![CDATA[str(.) == "CS-RS-ACS-GS-5106 06.00" || rtrim(str(.)) == "CS-RS-ACS-ESL-5364 1.8"]]></ct:Test>
  <ct:Test name="MPHRefDocL1NetCDF" description="The REF_DOC field in the MPH should have the value 'CS-RS-ACS-ESL-5364 1.8' (NetCDF version)" criticality="Warning"><![CDATA[rtrim(str(.)) == "CS-RS-ACS-ESL-5364 1.8"]]></ct:Test>
  <ct:Test name="MPHRefDocL2" description="The REF_DOC field in the MPH should have the value 'CS-RS-ACS-GS-5123 04.00' or 'CS-RS-ACS-ESL-5265 1.6'" criticality="Warning"><![CDATA[str(.) == "CS-RS-ACS-GS-5123 04.00" || rtrim(str(.)) == "CS-RS-ACS-ESL-5265 1.6"]]></ct:Test>
  <ct:Test name="MPHRefDocL2NetCDF" description="The REF_DOC field in the MPH should have the value 'CS-RS-ACS-ESL-5265 1.6' (NetCDF version)" criticality="Warning"><![CDATA[rtrim(str(.)) == "CS-RS-ACS-ESL-5265 1.6"]]></ct:Test>
  <ct:Test name="MPHRefDocOPL1" description="The REF_DOC field in the MPH should have the value 'C2-RS-ACS-ESL-5213 1.4 '" criticality="Warning"><![CDATA[str(.) == "C2-RS-ACS-ESL-5213 1.4 "]]></ct:Test>
  <ct:Test name="MPHRefDocOPHDRNetCDF" description="The REF_DOC field in the MPH should have the value 'C2-RS-ACS-ESL-5266 3.1' or 'C2-RS-ACS-ESL-5266 3.3' or 'C2-RS-ACS-ESL-5266 3.4'" criticality="Warning"><![CDATA[trim(str(.)) == "C2-RS-ACS-ESL-5266 3.1" || trim(str(.)) == "C2-RS-ACS-ESL-5266 3.3" || trim(str(.)) == "C2-RS-ACS-ESL-5266 3.4"]]></ct:Test>
  <ct:Test name="MPHRefDocOPL2" description="The REF_DOC field in the MPH should have the value 'C2-RS-ACS-ESL-5213 1.4' for baseline B and 'C2-RS-ACS-ESL-5266 3.1' or 'C2-RS-ACS-ESL-5266 3.3' for baseline C" criticality="Warning"><![CDATA[(substr(51,1,filename()) =="C" && (trim(str(.)) == "C2-RS-ACS-ESL-5266 3.1" || trim(str(.)) == "C2-RS-ACS-ESL-5266 3.3")) || str(.) == "C2-RS-ACS-ESL-5213 1.4"]]></ct:Test>
  <ct:Test name="MPHRefDocOPV31NetCDF" description="The REF_DOC field in the MPH should have the value 'C2-RS-ACS-ESL-5266 3.1'" criticality="Warning"><![CDATA[trim(str(.)) == "C2-RS-ACS-ESL-5266 3.1"]]></ct:Test>
  <ct:Test name="MPHRefDocOPV33NetCDF" description="The REF_DOC field in the MPH should have the value 'C2-RS-ACS-ESL-5266 3.3'" criticality="Warning"><![CDATA[trim(str(.)) == "C2-RS-ACS-ESL-5266 3.3"]]></ct:Test>
  <ct:Test name="MPHRefDocOPV34NetCDF" description="The REF_DOC field in the MPH should have the value 'C2-RS-ACS-ESL-5266 3.4'" criticality="Warning"><![CDATA[trim(str(.)) == "C2-RS-ACS-ESL-5266 3.4"]]></ct:Test>
  <ct:Test name="MPHSensingTimeOrder" description="Start sensing time should be before stop sensing time" criticality="Error"><![CDATA[float(./sensing_start) <= float(./sensing_stop)]]></ct:Test>
  <ct:Test name="MPHSensingTimeOrderNetCDF" description="Start sensing time should be before stop sensing time - NetCDF" criticality="Error"><![CDATA[time(str(@sensing_start), "dd-MMM-yyyy HH:mm:ss.SSSSSS") <= time(str(@sensing_stop), "dd-MMM-yyyy HH:mm:ss.SSSSSS")]]></ct:Test>
  <ct:Test name="MPHStartTimeAISP" description="The start time in the MPH should be the same as the start time of the first Instrument Source Packet in the product" criticality="Warning"><![CDATA[numelements(/mds) == 0 || float(.) == float(/mds[0]/sensing_time)]]></ct:Test>
  <ct:Test name="MPHStopTimeAISP" description="The stop time in the MPH should be the same as the start time of the last Instrument Source Packet in the product" criticality="Warning"><![CDATA[numelements(/mds) == 0 || float(.) == float(/mds[numelements(/mds) - 1]/sensing_time)]]></ct:Test>
  <ct:Test name="MphTotSizeMatchesComputedSize" description="Total size reported in MPH must be equal to size computed using SPH and DSD information" criticality="Warning"><![CDATA[int(/mph/tot_size) == 1247 + int(/mph/sph_size) + add(/dsd, int(./num_dsr) * int(./dsr_size))]]></ct:Test>
  <ct:Test name="NumDiscardedIspCheck" description="Number of discarded ISPs should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="NumErrorIspCheck" description="Number of ISPs with errors should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="NumMissingIspCheck" description="Number of missing ISP should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="NumRsCorrectionsCheck" description="Number of symbols with Reed-Solomon correction should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="NumRsIspCheck" description="Number of ISPs with Reed-Solomon correction should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="ProcessingCenterValidL0" description="Processing center for level 0 must be Kiruna" criticality="Warning"><![CDATA[rtrim(str(.)) == "Kiruna"]]></ct:Test>
  <ct:Test name="ProcessingCenterValidL1" description="Processing center for level 1 must be PDS" criticality="Warning"><![CDATA[rtrim(str(.)) == "PDS"]]></ct:Test>
  <ct:Test name="ProcessingCenterValidL2" description="Processing center for level 2 must be PDS or CTA000" criticality="Warning"><![CDATA[rtrim(str(.)) == "PDS" || rtrim(str(.)) == "CTA000"]]></ct:Test>
  <ct:Test name="ProcessingStageValidL0" description="Processing stage must be T (test) or O (routine operations)" criticality="Warning"><![CDATA[str(.) == "T" || str(.) == "O"]]></ct:Test>
  <ct:Test name="ProcessingStageValidL0HDR" description="Processing stage must be TEST or OPER" criticality="Warning"><![CDATA[str(.) == "TEST" || str(.) == "OPER"]]></ct:Test>
  <ct:Test name="ProcessingStageValidL1" description="Processing stage must be T (test), O (routine operations), N (Near-Real Time), R (Reprocessing) or L (Long Term Archive)" criticality="Warning"><![CDATA[str(.) == "T" || str(.) == "O" || str(.) == "N" || str(.) == "R" || str(.) == "L"]]></ct:Test>
  <ct:Test name="ProcessingStageValidL1HDR" description="Processing stage must be NRT_, TEST, OFFL, RPRO or LTA_" criticality="Warning"><![CDATA[str(.) == "TEST" || str(.) == "NRT_" || str(.) == "OFFL" || str(.) == "RPRO" || str(.) == "LTA_"]]></ct:Test>
  <ct:Test name="ProcessingStageValidL2" description="Processing stage must be T (test), O (routine operations), N (Near-Real Time), R (Reprocessing) or L (Long Term Archive)" criticality="Warning"><![CDATA[str(.) == "T" || str(.) == "O" || str(.) == "N" || str(.) == "R" || str(.) == "L"]]></ct:Test>
  <ct:Test name="ProcessingStageValidL2HDR" description="Processing stage must be NRT_, TEST, OFFL, RPRO or LTA_" criticality="Warning"><![CDATA[str(.) == "TEST" || str(.) == "NRT_" || str(.) == "OFFL" || str(.) == "RPRO" || str(.) == "LTA_"]]></ct:Test>
  <ct:Test name="ProductErrFlag" description="Product error flag should be zero" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="ProductErrFlagNetCDF" description="Product error flag should be zero" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="QualityFlag" description="This quality flag should be 0" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="QualityFlagNetCDF" description="This quality flag should be 0 - NetCDF" criticality="Warning"><![CDATA[str(.) == "0"]]></ct:Test>
  <ct:Test name="RangeAGCOcean" description="The AGC should be between 0 and 6200 or 32767 for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= 0 && int(.) <= 6200)]]></ct:Test>
  <ct:Test name="RangeAGCOceanNetCDF" description="The AGC should be between 0 and 6200 or a fill value for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6200)]]></ct:Test>
  <ct:Test name="RangeAGCOceanFD3" description="The AGC should be between 0 and 6200 or 32767 for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type) != 0 || int(.) == 32767 || (int(.) >= 0 && int(.) <= 6200)]]></ct:Test>
  <!-- TODO implement RangeAGCOceanFD3NetCDF for L1B *_hr_ku_* fields -->
  <ct:Test name="RangeAGCOceanFD3NetCDF" description="The AGC should be between 0 and 6200 or a fill value for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6200)]]></ct:Test>
  <ct:Test name="RangeAGCOrFlagged" description="The AGC should be between 0 and 6200 or the AGC_Inconsistency flag should be set for surface type = ocean" criticality="Warning"><![CDATA[int(../../../time_orb_data[index(:/..)]/meas_conf_flags/agc_inc) == 1 || (int(.) >= 0 && int(.) <= 6200)]]></ct:Test>
  <ct:Test name="RangeAGCOrFlaggedOceanFD3" description="The AGC should be between 0 and 6200 or the AGC_Inconsistency flag should be set for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type) != 0 || int(../../../time_orb_data[index(:/..)]/meas_conf_flags/agc_inc) == 1 || (int(.) >= 0 && int(.) <= 6200)]]></ct:Test>
  <ct:Test name="RangeAltimeterWindSpeedOCeanNetCDF" description="The altimeter wind speed should be between 0 and 30000 mm/s (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 30000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOG" description="The CoG altitude should be between 710000000mm and 760000000mm (or 0)" criticality="Warning"><![CDATA[int(.) == 0 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOcean" description="The CoG altitude should be between 710000000mm and 760000000mm for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOceanNetCDF" description="The CoG altitude should be between 710000000mm and 760000000mm for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOceanFD2" description="The CoG altitude should be between 710000000mm and 760000000mm (or 0 or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 0 || int(.) == 2147483647 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOceanFD2NetCDF" description="The CoG altitude should be between 710000000mm and 760000000mm (or 0 or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOceanFD2PLRMNetCDF" description="The CoG altitude should be between 710000000mm and 760000000mm (or 0 or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOrBlank" description="The CoG altitude should be between 710000000mm and 760000000mm" criticality="Warning"><![CDATA[int(../meas_conf_flags/blnk_blk) == 1 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOrBlankOcean" description="The CoG altitude should be between 710000000mm and 760000000mm for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(../meas_conf_flags/blnk_blk) == 1 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOrBlankOceanFD3" description="The CoG altitude should be between 710000000mm and 760000000mm for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type) != 0 || int(../meas_conf_flags/blnk_blk) == 1 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeAltitudeCOGOrBlankOceanFD3NetCDF" description="The CoG altitude should be between 710000000mm and 760000000mm or blank for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(/flag_mcd_20_ku[index(:)]) & 1073741824 == 1073741824 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZero" description="The backscatter sigma zero should be between -2500 and 6000 (or missing) for at least 90% of the cases" criticality="Warning"><![CDATA[add(/siral_l2_mds, count(./meas_data, int(./bkscat_sigma_0) == 32767 || (int(./bkscat_sigma_0) >= -2500 && int(./bkscat_sigma_0) <= 6000))) >= 0.9 * numelements(/siral_l2_mds) * 20]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroTrkr1" description="The backscatter sigma zero should be between -2500 and 6000 (or missing) for at least 90% of the cases" criticality="Warning"><![CDATA[add(/siral_l2_mds, count(./meas_data, int(./sig_0_trkr_1) == 32767 || (int(./sig_0_trkr_1) >= -2500 && int(./sig_0_trkr_1) <= 6000))) >= 0.9 * numelements(/siral_l2_mds) * 20]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroTrkr2" description="The backscatter sigma zero should be between -2500 and 6000 (or missing) for at least 90% of the cases" criticality="Warning"><![CDATA[add(/siral_l2_mds, count(./meas_data, int(./sig_0_trkr_2) == 32767 || (int(./sig_0_trkr_2) >= -2500 && int(./sig_0_trkr_2) <= 6000))) >= 0.9 * numelements(/siral_l2_mds) * 20]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroTrkr3" description="The backscatter sigma zero should be between -2500 and 6000 (or missing) for at least 90% of the cases" criticality="Warning"><![CDATA[add(/siral_l2_mds, count(./meas_data, int(./sig_0_trkr_3) == 32767 || (int(./sig_0_trkr_3) >= -2500 && int(./sig_0_trkr_3) <= 6000))) >= 0.9 * numelements(/siral_l2_mds) * 20]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOcean" description="The backscatter sigma zero should be between 700 and 3000 (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= 700 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOceanFD2" description="The backscatter sigma zero should be between 700 and 3000 (or 0 or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 0 || int(.) == 32767 || (int(.) >= 700 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOcean" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanNetCDF" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanExcludingPolarNetCDF" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[float(/lat_01[index(:)]) > 70e7 || float(/lat_01[index(:)]) < -70e7 || int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanFD2" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 32767 || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanFD2NetCDF" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanExcludingPolarFD2NetCDF" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_ku[index(:)]) > 70e7 || float(/lat_20_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanFD2PLRMNetCDF" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeBackscatterSigmaZeroOPOceanExcludingPolarFD2PLRMNetCDF" description="The backscatter sigma zero should be between 700 and 7500 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_plrm_ku[index(:)]) > 70e7 || float(/lat_20_plrm_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 700 && int(.) <= 7500)]]></ct:Test>
  <ct:Test name="RangeCoherence" description="The coherence should be between 0 and 1000 (or fill value 9786)" criticality="Warning"><![CDATA[int(.) == 9786 || (int(.) >= 0 && int(.) <= 1000)]]></ct:Test>
  <ct:Test name="RangeDeltaTime" description="The delta time should be between 0 and 1E6 for at least 90% of the cases" criticality="Warning"><![CDATA[add(/siral_l2_mds, count(./meas_data, int(./delta_time) >= 0 && int(./delta_time) <= 1.0E6)) >= 0.9 * numelements(/siral_l2_mds) * 20]]></ct:Test>
  <ct:Test name="RangeDryTroposphericCorrection" description="The Dry tropospheric correction should be between -2500mm and -1000mm (or missing)" criticality="Warning"><![CDATA[int(.) == 32767 || (int(.) >= -2500 && int(.) <= -1000)]]></ct:Test>
  <ct:Test name="RangeDryTroposphericCorrectionOcean" description="The Dry tropospheric correction should be between -2500mm and -1900mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -2500 && int(.) <= -1900)]]></ct:Test>
  <ct:Test name="RangeDryTroposphericCorrectionOceanNetCDF" description="The Dry tropospheric correction should be between -2500mm and -1900mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -2500 && int(.) <= -1900)]]></ct:Test>
  <ct:Test name="RangeDynamicAtmosphericCorrectionOcean" description="The Dynamic atmospheric correction should be between -1050mm and 1000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -1050 && int(.) <= 1000)]]></ct:Test>
  <ct:Test name="RangeDynamicAtmosphericCorrectionOceanNetCDF" description="The Dynamic atmospheric correction should be between -1050mm and 1000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -1050 && int(.) <= 1000)]]></ct:Test>
  <ct:Test name="RangeDynamicAtmosphericCorrectionOceanSF20Hz" description="The Dynamic atmospheric correction should be between -1050mm and 1000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type_flags[0]) != 0 || int(.) == 32767 || (int(.) >= -1050 && int(.) <= 1000)]]></ct:Test>
  <ct:Test name="RangeEchoesBeamsAveraged" description="The number of Echoes or Beams averaged should be between 30 and 280 for at least 90% of the cases" criticality="Warning"><![CDATA[add(/siral_l2_mds, count(./meas_data, int(./num_avg) >= 30 && int(./num_avg) <= 280)) >= 0.9 * numelements(/siral_l2_mds) * 20]]></ct:Test>
  <ct:Test name="RangeEchoesBeamsAveragedOceanFD3" description="The number of Echoes or Beams averaged should be between 91 and 256 for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type) != 0 || (int(.) >= 91 && int(.) <= 256)]]></ct:Test>
  <ct:Test name="RangeEchoesBeamsAveragedOceanFD3LRMNetCDF" description="The number of Echoes or Beams averaged should 91 for LRM mode and surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == 91]]></ct:Test>
  <ct:Test name="RangeEchoesBeamsAveragedOceanFD3SARNetCDF" description="The number of Echoes or Beams averaged should 256 for SAR mode and surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == 256]]></ct:Test>
  <ct:Test name="RangeEchoesBeamsAveragedOceanFD3SINNetCDF" description="The number of Echoes or Beams averaged should 24 for SARIN mode and surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == 24]]></ct:Test>
  <ct:Test name="RangeEquilibriumOceanTideOcean" description="The long period equilibrium ocean tide should be between -50mm and 50mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -50 && int(.) <= 50)]]></ct:Test>
  <ct:Test name="RangeEquilibriumOceanTideOceanSF20Hz" description="The long period equilibrium ocean tide should be between -50mm and 50mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type_flags[0]) != 0 || int(.) == 32767 || (int(.) >= -50 && int(.) <= 50)]]></ct:Test>
  <ct:Test name="RangeFreeboardOceanFD3SF20Hz" description="The freeboard should be between -500mm and 5000mm (or equal -9999mm) for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type_flags[0]) != 0 || int(.) == -9999 || (int(.) >= -500 && int(.) <= 5000)]]></ct:Test>
  <ct:Test name="RangeGeocentricPolarTide" description="The geocentric polar tide should be between -20mm and 20mm (or missing)" criticality="Warning"><![CDATA[int(.) == 32767 || (int(.) >= -20 && int(.) <= 20)]]></ct:Test>
  <ct:Test name="RangeGeocentricPolarTideOcean" description="The geocentric polar tide should be between -20mm and 20mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -20 && int(.) <= 20)]]></ct:Test>
  <ct:Test name="RangeGeocentricPolarTideOceanNetCDF" description="The geocentric polar tide should be between -20mm and 20mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -20 && int(.) <= 20)]]></ct:Test>
  <ct:Test name="RangeIceRangeToOceanSurfaceOcean" description="The ice range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 4294967295 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeIceRangeToOceanSurfaceOceanNetCDF" description="The ice range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeIceRangeToOceanSurfaceOceanFD2" description="The ice range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 4294967295 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeIceRangeToOceanSurfaceOceanFD2NetCDF" description="The ice range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeIceRangeToOceanSurfaceOceanFD2PLRMNetCDF" description="The ice range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeInstrumentIdentifier" description="The SIRAL instrument identifier should be either 'A' or 'B'" criticality="Error"><![CDATA[str(.) == "A" || str(.) == "B"]]></ct:Test>
  <ct:Test name="RangeInverseBarometricCorrectionOcean" description="The Inverse barometric correction should be between -2000mm and 2000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -2000 && int(.) <= 2000)]]></ct:Test>
  <ct:Test name="RangeInverseBarometricCorrectionOceanNetCDF" description="The Inverse barometric correction should be between -2000mm and 2000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -2000 && int(.) <= 2000)]]></ct:Test>
  <ct:Test name="RangeInverseBarometricCorrectionOceanSF20Hz" description="The Inverse barometric correction should be between -2000mm and 2000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type_flags[0]) != 0 || int(.) == 32767 || (int(.) >= -2000 && int(.) <= 2000)]]></ct:Test>
  <ct:Test name="RangeIonosphericCorrection" description="The ionospheric correction should be between -400mm and 40mm (or missing)" criticality="Warning"><![CDATA[int(.) == 32767 || (int(.) >= -400 && int(.) <= 40)]]></ct:Test>
  <ct:Test name="RangeIonosphericCorrectionOcean" description="The ionospheric correction should be between -400mm and 40mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -400 && int(.) <= 40)]]></ct:Test>
  <ct:Test name="RangeIonosphericCorrectionOceanNetCDF" description="The ionospheric correction should be between -400mm and 40mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -400 && int(.) <= 40)]]></ct:Test>
  <ct:Test name="RangeLatitude_6" description="Latitude should be between -90E6 and 90E6" criticality="Error"><![CDATA[int(.) >= -90.0E6 && int(.) <= 90.0E6]]></ct:Test>
  <ct:Test name="RangeLatitude_7" description="Latitude should be between -90E7 and 90E7" criticality="Error"><![CDATA[int(.) >= -90.0E7 && int(.) <= 90.0E7]]></ct:Test>
  <ct:Test name="RangeLatitudeOrBlank_7" description="Latitude should be between -90E7 and 90E7" criticality="Error"><![CDATA[int(../meas_conf_flags/blnk_blk) == 1 || (int(.) >= -90.0E7 && int(.) <= 90.0E7)]]></ct:Test>
  <ct:Test name="RangeLatitudeOrBlank_7NetCDF" description="Latitude should be between -90E7 and 90E7 - NetCDF" criticality="Error"><![CDATA[int(.) == int(..@FillValue[0]) || (int(.) >= -90.0E7 && int(.) <= 90.0E7)]]></ct:Test>
  <ct:Test name="RangeLatitudeOrBlankOP_7" description="Latitude should be between -90E7 and 90E7" criticality="Error"><![CDATA[int(../../meas_conf_flags[index(:)]/blnk_blk) == 1 || (int(.) >= -90.0E7 && int(.) <= 90.0E7)]]></ct:Test>
  <ct:Test name="RangeLatitudeOrBlankOP_7NetCDF" description="Latitude should be between -90E7 and 90E7 - NetCDF" criticality="Error"><![CDATA[int(/flag_mcd_20_ku[index(:)]) & 1073741824 == 1073741824 || (int(.) >= -90.0E7 && int(.) <= 90.0E7)]]></ct:Test>
  <ct:Test name="RangeLongitude_6" description="Longitude should be between -180E6 and 180E6" criticality="Error"><![CDATA[int(.) >= -180.0E6 && int(.) <= 180.0E6]]></ct:Test>
  <ct:Test name="RangeLongitude_7" description="Longitude should be between -180E7 and 180E7" criticality="Error"><![CDATA[int(.) >= -180.0E7 && int(.) <= 180.0E7]]></ct:Test>
  <ct:Test name="RangeLongitudeOrBlank_7" description="Longitude should be between -180E7 and 180E7" criticality="Error"><![CDATA[int(../meas_conf_flags/blnk_blk) == 1 || (int(.) >= -180.0E7 && int(.) <= 180.0E7)]]></ct:Test>
  <ct:Test name="RangeLongitudeOrBlank_7NetCDF" description="Longitude should be between -180E7 and 180E7 - NetCDF" criticality="Error"><![CDATA[int(.) == int(..@FillValue[0]) || (int(.) >= -180.0E7 && int(.) <= 180.0E7)]]></ct:Test>
  <ct:Test name="RangeLongitudeOrBlankOP_7" description="Longitude should be between -180E7 and 180E7" criticality="Error"><![CDATA[int(../../meas_conf_flags[index(:)]/blnk_blk) == 1 || (int(.) >= -180.0E7 && int(.) <= 180.0E7)]]></ct:Test>
  <ct:Test name="RangeLongitudeOrBlankOP_7NetCDF" description="Longitude should be between -180E7 and 180E7 - NetCDF" criticality="Error"><![CDATA[int(/flag_mcd_20_ku[index(:)]) & 1073741824 == 1073741824 || (int(.) >= -180.0E7 && int(.) <= 180.0E7)]]></ct:Test>
  <ct:Test name="RangeLongPeriodTideOcean" description="The Long period tide height should be between -50mm and 50mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -50 && int(.) <= 50)]]></ct:Test>
  <ct:Test name="RangeLongPeriodTideOceanNetCDF" description="The Long period tide height should be between -50mm and 50mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -50 && int(.) <= 50)]]></ct:Test>
  <ct:Test name="RangeMicrosecond" description="The number of microseconds relative to a second should be in the range [0..999999]" criticality="Error"><![CDATA[int(.) >= 0 && int(.) <= 999999]]></ct:Test>
  <ct:Test name="RangeMicrosecondOrBlank" description="The number of microseconds relative to a second should be in the range [0..999999]" criticality="Error"><![CDATA[int(../../meas_conf_flags/blnk_blk) == 1 || (int(.) >= 0 && int(.) <= 999999)]]></ct:Test>
  <ct:Test name="RangeMispointingAttitudeAngle" description="The mispointing attitude angle (10^-2) should be between 0 and 200" criticality="Warning"><![CDATA[int(.) >= 0 && int(.) <= 200]]></ct:Test>
  <ct:Test name="RangeMSSGeoidHeight" description="The MSS/geoid height should be between -150000mm and 150000mm (or missing)" criticality="Warning"><![CDATA[int(.) == -2147483648 || int(.) == 2147483647 || (int(.) >= -150000 && int(.) <= 150000)]]></ct:Test>
  <ct:Test name="RangeMSSGeoidHeightOcean" description="The MSS/geoid height should be between -150000mm and 150000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == -2147483648 || int(.) == 2147483647 || (int(.) >= -150000 && int(.) <= 150000)]]></ct:Test>
  <ct:Test name="RangeMSSGeoidHeightOPOcean" description="The MSS/geoid height should be between -106000mm and 88000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == -2147483648 || int(.) == 2147483647 || (int(.) >= -106000 && int(.) <= 88000)]]></ct:Test>
  <ct:Test name="RangeMSSGeoidHeightOPOceanNetCDF" description="The MSS/geoid height should be between -106000mm and 88000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -106000 && int(.) <= 88000)]]></ct:Test>
  <ct:Test name="RangeNELPOceanTideOcean" description="The Non-equilibrium long period ocean loading tide height should be between -40mm and 40mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -40 && int(.) <= 40)]]></ct:Test>
  <ct:Test name="RangeNELPOceanTideOceanNetCDF" description="The Non-equilibrium long period ocean loading tide height should be between -40mm and 40mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -40 && int(.) <= 40)]]></ct:Test>
  <ct:Test name="RangeOceanLoadingTide" description="The ocean loading tide should be between -100mm and 100mm (or missing)" criticality="Warning"><![CDATA[int(.) == 32767 || (int(.) >= -100 && int(.) <= 100)]]></ct:Test>
  <ct:Test name="RangeOceanLoadingTideOcean" description="The ocean loading tide should be between -100mm and 100mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -100 && int(.) <= 100)]]></ct:Test>
  <ct:Test name="RangeOceanLoadingTideOceanNetCDF" description="The ocean loading tide should be between -100mm and 100mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -100 && int(.) <= 100)]]></ct:Test>
  <ct:Test name="RangeOceanRangeToOceanSurfaceOcean" description="The ocean range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 4294967295 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeOceanRangeToOceanSurfaceOceanNetCDF" description="The ocean range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeOceanRangeToOceanSurfaceOceanFD2" description="The ocean range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 4294967295 || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeOceanRangeToOceanSurfaceOceanFD2NetCDF" description="The ocean range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeOceanRangeToOceanSurfaceOceanFD2PLRMNetCDF" description="The ocean range to ocean surface should be between 710000000mm and 760000000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 710000000 && int(.) <= 760000000)]]></ct:Test>
  <ct:Test name="RangeOceanTideOcean" description="The ocean tide should be between -10000mm and 10000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -10000 && int(.) <= 10000)]]></ct:Test>
  <ct:Test name="RangeOceanTideOceanNetCDF" description="The ocean tide should be between -10000mm and 10000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -10000 && int(.) <= 10000)]]></ct:Test>
  <ct:Test name="RangeOceanTideOceanSF20Hz" description="The ocean tide should be between -10000mm and 10000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type_flags[0]) != 0 || int(.) == 32767 || (int(.) >= -10000 && int(.) <= 10000)]]></ct:Test>
  <ct:Test name="RangePeakinessFDM" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 65535 || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessLRM" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean or continental ice" criticality="Warning"><![CDATA[(int(../../../surf_type_flags[0]) != 0 && int(../../../surf_type_flags[0]) != 2) || int(.) == 65535 || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessOP" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessOPNetCDF" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPLRMNetCDF" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[float(/lat_01[index(:)]) > 70e7 || float(/lat_01[index(:)]) < -70e7 || int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPSARNetCDF" description="The Peakiness should be between 0 and 15000 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[float(/lat_01[index(:)]) > 70e7 || float(/lat_01[index(:)]) < -70e7 || int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPSINNetCDF" description="The Peakiness should be between 0 and 90000 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[float(/lat_01[index(:)]) > 70e7 || float(/lat_01[index(:)]) < -70e7 || int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 90000)]]></ct:Test>
  <ct:Test name="RangePeakinessOPFD2" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 32767 || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessOPFD2NetCDF" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPFD2LRMNetCDF" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_ku[index(:)]) > 70e7 || float(/lat_20_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPFD2SARNetCDF" description="The Peakiness should be between 0 and 15000 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_ku[index(:)]) > 70e7 || float(/lat_20_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPFD2SINNetCDF" description="The Peakiness should be between 0 and 90000 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_ku[index(:)]) > 70e7 || float(/lat_20_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 90000)]]></ct:Test>
  <ct:Test name="RangePeakinessOPFD2PLRMNetCDF" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPFD2PLRMLRMNetCDF" description="The Peakiness should be between 0 and 6400 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_plrm_ku[index(:)]) > 70e7 || float(/lat_20_plrm_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 6400)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPFD2PLRMSARNetCDF" description="The Peakiness should be between 0 and 15000 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_plrm_ku[index(:)]) > 70e7 || float(/lat_20_plrm_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangePeakinessExcludingPolarOPFD2PLRMSINNetCDF" description="The Peakiness should be between 0 and 90000 (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_plrm_ku[index(:)]) > 70e7 || float(/lat_20_plrm_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 90000)]]></ct:Test>
  <ct:Test name="RangePeakinessSAR" description="The Peakiness should be between 0 and 66000 for surface type = ocean or continental ice" criticality="Warning"><![CDATA[(int(../../../surf_type_flags[0]) != 0 && int(../../../surf_type_flags[0]) != 2) || (int(.) >= 0 && int(.) <= 66000)]]></ct:Test>
  <ct:Test name="RangePeakinessSIN" description="The Peakiness should be between 0 and 21000 for surface type = ocean or continental ice" criticality="Warning"><![CDATA[(int(../../../surf_type_flags[0]) != 0 && int(../../../surf_type_flags[0]) != 2) || int(.) == 65535 || (int(.) >= 0 && int(.) <= 21000)]]></ct:Test>
  <ct:Test name="RangePercentage_2" description="Percentage 10^-2 should be between 0 and 10000" criticality="Error"><![CDATA[int(.) >= 0 && int(.) <= 10000]]></ct:Test>
  <ct:Test name="L1BProcThreshWithinRangeHRNetCDF" description="Range of l1b_proc_thresh_hr should be between 0 and 10000 (if it exists)" criticality="Error"><![CDATA[!exists(@l1b_proc_thresh_hr) || (int(@l1b_proc_thresh_hr[0]) >= 0 && int(@l1b_proc_thresh_hr[0]) <= 10000)]]></ct:Test>
  <ct:Test name="RangePhaseCorrectionExternal" description="The phase correction should be 0" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="RangePhaseCorrectionInternal" description="The phase correction should be between 1438000 and 1473000 microradians (or 0)" criticality="Warning"><![CDATA[int(.) == 0 || (int(.) >= 1438000 && int(.) <= 1473000)]]></ct:Test>
  <ct:Test name="RangePhaseDifference" description="The phase difference should be between -pi*10^-6 and pi*10^-6" criticality="Warning"><![CDATA[int(.) >= -3141593 && int(.) <= 3141593]]></ct:Test>
  <ct:Test name="RangeSecond" description="The number of seconds relative to a day should be in the range [0..86400]" criticality="Error"><![CDATA[int(.) >= 0 && int(.) <= 86400]]></ct:Test>
  <ct:Test name="RangeSecondOrBlank" description="The number of seconds relative to a day should be in the range [0..86400]" criticality="Error"><![CDATA[int(../../meas_conf_flags/blnk_blk) == 1 || (int(.) >= 0 && int(.) <= 86400)]]></ct:Test>
  <ct:Test name="RangeSensingStartStopOP" description="The time value should be between the sensing start/stop times of the MPH with a margin of 0.5s" criticality="Error"><![CDATA[float(.) >= float(/mph/sensing_start) - 0.5 && float(.) <= float(/mph/sensing_stop) + 0.5]]></ct:Test>
  <ct:Test name="RangeSensingStartStopOPNetCDF" description="The time value should be between the sensing start/stop times of the MPH with a margin of 0.5s - NetCDF" criticality="Error"><![CDATA[(float(.) >= float(time(str(/@sensing_start), "dd-MMM-yyyy HH:mm:ss.SSSSSS")) - 0.5 && float(.) <= float(time(str(/@sensing_stop), "dd-MMM-yyyy HH:mm:ss.SSSSSS")) + 0.5)]]></ct:Test>
  <ct:Test name="RangeSensingStartStopOPOrBlank" description="The time value should be between the sensing start/stop times of the MPH with a margin of 0.5s" criticality="Error"><![CDATA[int(../meas_conf_flags/blnk_blk) == 1 || (float(.) >= float(/mph/sensing_start) - 0.5 && float(.) <= float(/mph/sensing_stop) + 0.5)]]></ct:Test>
  <ct:Test name="RangeSensingStartStopOPOrBlankNetCDF" description="The time value should be between the sensing start/stop times of the MPH with a margin of 0.5s - NetCDF" criticality="Error"><![CDATA[int(/flag_mcd_20_ku[index(:)]) & 1073741824 == 1073741824 || (float(.) >= float(time(str(/@sensing_start), "dd-MMM-yyyy HH:mm:ss.SSSSSS")) - 0.5 && float(.) <= float(time(str(/@sensing_stop), "dd-MMM-yyyy HH:mm:ss.SSSSSS")) + 0.5)]]></ct:Test>
  <ct:Test name="RangeSensingStartStopOPOrBlankHRNetCDF" description="The time value should be between the sensing start/stop times of the MPH with a margin of 0.5s - NetCDF" criticality="Error"><![CDATA[int(/flag_mcd_20_hr_ku[index(:)]) & 1073741824 == 1073741824 || (float(.) >= float(time(str(/@sensing_start), "dd-MMM-yyyy HH:mm:ss.SSSSSS")) - 0.5 && float(.) <= float(time(str(/@sensing_stop), "dd-MMM-yyyy HH:mm:ss.SSSSSS")) + 0.5)]]></ct:Test>
  <ct:Test name="RangeRecordTAIStartStopOrBlank" description="The time value should be between the record TAI start/stop times of the SPH" criticality="Error"><![CDATA[int(../meas_conf_flags/blnk_blk) == 1 || (float(.) >= float(/sph/start_record_tai_time) && float(.) <= float(/sph/stop_record_tai_time))]]></ct:Test>
  <ct:Test name="RangeRecordTAIStartStopOPOrBlankHRNetCDF" description="The time value should be between the the record TAI start/stop times of the MPH with a margin of 0.5 s - NetCDF" criticality="Error"><![CDATA[int(/flag_mcd_20_hr_ku[index(:)]) & 1073741824 == 1073741824 || (float(.) >= float(time(str(/@first_record_time), "'TAI='yyyy-MM-dd'T'HH:mm:ss.SSSSSS") - 0.5) && float(.) <= float(time(str(/@last_record_time), "'TAI='yyyy-MM-dd'T'HH:mm:ss.SSSSSS") + 0.5))]]></ct:Test>
  <ct:Test name="RangeSeaStateBiasCorrectionOcean" description="The sea state bias correction should be between -500mm and 0mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -500 && int(.) <= 0)]]></ct:Test>
  <ct:Test name="RangeSeaStateBiasCorrectionOceanNetCDF" description="The sea state bias correction should be between -500mm and 0mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -500 && int(.) <= 0)]]></ct:Test>
  <ct:Test name="RangeSeaStateBiasCorrectionOceanSF20Hz" description="The sea state bias correction should be between -500mm and 0mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type_flags[0]) != 0 || int(.) == 32767 || (int(.) >= -500 && int(.) <= 0)]]></ct:Test>
  <ct:Test name="RangeSeaSurfaceHeightAnomalyOcean" description="The sea surface height anomaly should be between -3000mm and 3000mm for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || (int(.) >= -3000 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeSeaSurfaceHeightAnomalyOceanNetCDF" description="The sea surface height anomaly should be between -3000mm and 3000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -3000 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeSeaSurfaceHeightAnomalyOceanFD3" description="The sea surface height anomaly should be between -3000mm and 3000mm for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type_flags[0]) != 0 || (int(.) >= -3000 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeSeaSurfaceHeightAnomalyOceanFD3NetCDF" description="The sea surface height anomaly should be between -3000mm and 3000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -3000 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeSeaSurfaceHeightAnomalyOceanFD3PLRMNetCDF" description="The sea surface height anomaly should be between -3000mm and 3000mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -3000 && int(.) <= 3000)]]></ct:Test>
  <ct:Test name="RangeSignificantWaveHeightOcean" description="The significant wave height should be between 0mm and 15000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangeSignificantWaveHeightOceanExcludingPolarNetCDF" description="The significant wave height should be between 0mm and 15000mm (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[float(/lat_01[index(:)]) > 70e7 || float(/lat_01[index(:)]) < -70e7 || int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangeSignificantWaveHeightOceanFD2" description="The significant wave height should be between 0mm and 15000mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../../surf_type) != 0 || int(.) == 32767 || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangeSignificantWaveHeightOceanExcludingPolarFD2NetCDF" description="The significant wave height should be between 0mm and 15000mm (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_ku[index(:)]) > 70e7 || float(/lat_20_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangeSignificantWaveHeightOceanExcludingPolarFD2PLRMNetCDF" description="The significant wave height should be between 0mm and 15000mm (or missing) for surface type = ocean for latitudes between -70 and 70 degrees - NetCDF" criticality="Warning"><![CDATA[int(/ind_meas_1hz_20_plrm_ku[index(:)]) < 0 || int(/ind_meas_1hz_20_plrm_ku[index(:)]) >= numelements(/time_01) || float(/lat_20_plrm_ku[index(:)]) > 70e7 || float(/lat_20_plrm_ku[index(:)]) < -70e7 || int(/surf_type_01[int(/ind_meas_1hz_20_plrm_ku[index(:)])]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= 0 && int(.) <= 15000)]]></ct:Test>
  <ct:Test name="RangeSnowDepth" description="The snow depth should be between 0mm and 520mm for abs(latitude) > 60deg" criticality="Warning"><![CDATA[abs(int(../lat)) <= 6e8 || (int(.) >= 0 && int(.) <= 520)]]></ct:Test>
  <ct:Test name="RangeSolidEarthTide" description="The solid earth tide should be between -500mm and 500mm (or missing)" criticality="Warning"><![CDATA[int(.) == 32767 || (int(.) >= -500 && int(.) <= 500)]]></ct:Test>
  <ct:Test name="RangeSolidEarthTideOcean" description="The solid earth tide should be between -500mm and 500mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -500 && int(.) <= 500)]]></ct:Test>
  <ct:Test name="RangeSolidEarthTideOceanNetCDF" description="The solid earth tide should be between -500mm and 500mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -500 && int(.) <= 500)]]></ct:Test>
  <ct:Test name="RangeSurfaceHeight" description="The height of the surface w.r.t. the ellipsoid should be between -430000 and 8800000" criticality="Warning"><![CDATA[int(.) >= -430000 && int(.) <= 8800000]]></ct:Test>
  <ct:Test name="RangeSurfaceTypeFlag" description="The surface type flag should be 0, 1, 2, or 3" criticality="Error"><![CDATA[int(.) >= 0 && int(.) <= 3]]></ct:Test>
  <ct:Test name="RangeTotalFixedGain" description="The Total Fixed Gain should be 3500 or 0" criticality="Warning"><![CDATA[int(.) == 0 || int(.) == 3500]]></ct:Test>
  <ct:Test name="RangeTotalFixedGainOceanFD3" description="The Total Fixed Gain should be 3500 or 0 for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type) != 0 || int(.) == 0 || int(.) == 3500]]></ct:Test>
  <ct:Test name="RangeWetTroposphericCorrection" description="The Wet tropospheric correction should be between -500mm and 0mm (or missing)" criticality="Warning"><![CDATA[int(.) == 32767 || (int(.) >= -500 && int(.) <= 0)]]></ct:Test>
  <ct:Test name="RangeWetTroposphericCorrectionOcean" description="The Wet tropospheric correction should be between -500mm and -1mm (or missing) for surface type = ocean" criticality="Warning"><![CDATA[int(../surf_type) != 0 || int(.) == 32767 || (int(.) >= -500 && int(.) <= -1)]]></ct:Test>
  <ct:Test name="RangeWetTroposphericCorrectionOceanNetCDF" description="The Wet tropospheric correction should be between -500mm and -1mm (or missing) for surface type = ocean - NetCDF" criticality="Warning"><![CDATA[int(/surf_type_01[index(:)]) != 0 || int(.) == int(..@FillValue[0]) || (int(.) >= -500 && int(.) <= -1)]]></ct:Test>
  <ct:Test name="RangeWindowDelay" description="The window delay should be between 4.669E9 and 5.1035E9 (or 0)" criticality="Warning"><![CDATA[int(.) == 0 || (int(.) >= 4.669E9 && int(.) <= 5.1035E9)]]></ct:Test>
  <ct:Test name="RangeWindowDelayOceanFD3" description="The window delay should be between 4.669E9 and 5.1035E9 (or 0) for surface type = ocean" criticality="Warning"><![CDATA[int(../../../surf_type) != 0 || int(.) == 0 || (int(.) >= 4.669E9 && int(.) <= 5.1035E9)]]></ct:Test>
  <ct:Test name="RecordCountMDSR0" description="The record counter should equal the 0-based MDSR index" criticality="Warning"><![CDATA[int(.) == index(..)]]></ct:Test>
  <ct:Test name="RecordCountMDSR1" description="The record counter should equal the 1-based MDSR index (or 0)" criticality="Warning"><![CDATA[int(.) == 0 || int(.) == index(..) + 1]]></ct:Test>
  <ct:Test name="SameOrOneHigher1HzIndexFor20HzData" description="The 1 Hz index of a 20 Hz sample should be the same or 1 higher than its previous sample" criticality="Warning"><![CDATA[int(index(:)) == 0 || int(.) == int(..[index(:) - 1]) || int(.) - int(..[index(:) - 1]) == 1]]></ct:Test>
  <ct:Test name="SequenceCounterStepTOD" description="The sequence counter should be one higher (modulo 16384) with regard to the previous sequence counter" criticality="Warning"><![CDATA[if(index(..) == 0, index(../../..) == 0 || int(../meas_conf_flags/blnk_blk) == 1 || int(../../../..[index(:/../../..) - 1]/time_orb_data[19]/meas_conf_flags/blnk_blk) == 1 || int(.) == (int(../../../..[index(:/../../..) - 1]/time_orb_data[19]/src_seq_count) + 1) % 16384, int(../meas_conf_flags/blnk_blk) == 1 || int(../..[index(:/..) - 1]/meas_conf_flags/blnk_blk) == 1 || int(.) == (int(../..[index(:/..) - 1]/src_seq_count) + 1) % 16384)]]></ct:Test>
  <ct:Test name="SequenceCounterStepTODNetCDF" description="The sequence counter should be one higher (modulo 16384) with regard to the previous sequence counter - NetCDF" criticality="Warning"><![CDATA[int(index(:)) == 0 || int(/flag_mcd_20_ku[index(:)]) & 1073741824 == 1073741824 || int(/flag_mcd_20_ku[index(:) - 1]) & 1073741824 == 1073741824  || int(.) == ((int(..[index(:) - 1]) + 1) % 16384)]]></ct:Test>
  <ct:Test name="SequenceCounterStepTODHRNetCDF" description="The sequence counter should be modulo 4 higher with regard to the previous sequence counter - NetCDF (HR)" criticality="Warning"><![CDATA[int(index(:)) == 0 || int(/flag_mcd_20_hr_ku[index(:)]) & 1073741824 == 1073741824 || int(/flag_mcd_20_hr_ku[index(:) - 1]) & 1073741824 == 1073741824  || ( ((int(.) - int(..[index(:) - 1])) % 16384 >= 0) && (int(.) - int(..[index(:) - 1])) % 4 == 0 )]]></ct:Test>
  <ct:Test name="SbtValid" description="Satellite Binary Time must be all zeroes for Cryosat" criticality="Warning"><![CDATA[int(.) == 0]]></ct:Test>
  <ct:Test name="SPHAbsoluteOrbitOrder" description="The start absolute orbit should be before the end orbit" criticality="Error"><![CDATA[int(./abs_orbit_start) <= int(./abs_orbit_stop)]]></ct:Test>
  <ct:Test name="SPHAbsoluteOrbitStartMatchesMPH" description="The start absolute orbit should be equal to the Abs_Orbit in the MPH" criticality="Error"><![CDATA[int(./abs_orbit_start) <= int(../mph/abs_orbit)]]></ct:Test>
  <ct:Test name="GlobalAttributesAbsoluteOrbitOrderNetCDF" description="The start absolute orbit should be before the end orbit - NetCDF" criticality="Error"><![CDATA[int(@abs_orbit_start[0]) <= int(@abs_orbit_stop[0])]]></ct:Test>
  <ct:Test name="SPHDownlinkTimeOrder" description="The downlink utc start time should be before the end time" criticality="Error"><![CDATA[float(./downlink_start_utc) <= float(./downlink_stop_utc)]]></ct:Test>
  <ct:Test name="SPHRecordTaiTimeOrder" description="Start record TAI time should be before stop time" criticality="Error"><![CDATA[float(./start_record_tai_time) <= float(./stop_record_tai_time)]]></ct:Test>
  <ct:Test name="GlobalAttributesRecordTaiTimeOrder" description="Start record TAI time should be before stop time" criticality="Error"><![CDATA[time(str(@first_record_time), "'TAI='yyyy-MM-dd'T'HH:mm:ss.SSSSSS") <= time(str(@last_record_time), "'TAI='yyyy-MM-dd'T'HH:mm:ss.SSSSSS")]]></ct:Test>
  <ct:Test name="SPHSensingTimeTAIOrder" description="Start sensing time TAI should be before stop sensing time TAI" criticality="Error"><![CDATA[float(./sensing_start_tai) <= float(./sensing_stop_tai)]]></ct:Test>
  <ct:Test name="UnitVectorOrBlank_6" description="The three array elements should form a unit vector (using a scale factor of 10^-6)" criticality="Error"><![CDATA[int(../meas_conf_flags/blnk_blk) == 1 || (int(.[0]) >= -1000000 && int(.[0]) <= 1000000 && int(.[1]) >= -1000000 && int(.[1]) <= 1000000 && int(.[2]) >= -1000000 && int(.[2]) <= 1000000 && abs(float(.[0])^2 + float(.[1])^2 + float(.[2])^2 - 1e12) <= 1e7)]]></ct:Test>
  <ct:Test name="UtcSbtTimeValid" description="UTC to SBT time must be empty" criticality="Warning"><![CDATA[str(.) == "                           "]]></ct:Test>
  <ct:Test name="ValidityPeriodOrder" description="Validity start time should be before validity stop time" criticality="Error"><![CDATA[float(./Validity_Start) <= float(./Validity_Stop)]]></ct:Test>
  <ct:Test name="ValueOfCountAttributeForParent" description="The value for the count attribute of the parent List_of_... element should equal the number of occurences of this element" criticality="Error" ><![CDATA[int(str(..@count)) == numelements(.)]]></ct:Test>
  <ct:CrossFileTest name="MPH_Product" description="Product mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/mph/product))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Product)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Proc_Stage_Code" description="Proc_Stage_Code mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[str(/mph/proc_stage)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Proc_Stage_Code, 1)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Ref_Doc" description="Ref_Doc mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/mph/ref_doc))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Ref_Doc)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Software_Version" description="Software_Version mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/mph/software_ver))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Software_Version)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Phase" description="Phase mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/mph/phase))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Phase)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Cycle" description="Cycle mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/mph/cycle)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Cycle)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Rel_Orbit" description="Rel_Orbit mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/mph/rel_orbit)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Rel_Orbit)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Abs_Orbit" description="Abs_Orbit mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/mph/abs_orbit)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Abs_Orbit)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Delta_UT1" description="Delta_UT1 mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/delta_ut1)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Delta_UT1)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Position" description="X_Position mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/x_position)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Position" description="Y_Position mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/y_position)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Position" description="Z_Position mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/z_position)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Velocity" description="X_Velocity mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/x_velocity)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Velocity" description="Y_Velocity mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/y_velocity)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Velocity" description="Z_Velocity mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/mph/z_velocity)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_State_Vector_Source" description="State_Vector_Source mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/mph/vector_source))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Product_Err" description="Product_Err mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/mph/product_err)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Product_Err)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Tot_Size" description="Tot_Size mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/mph/tot_size)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Tot_Size)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SPH_Descriptor" description="SPH_Descriptor mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/sph/sph_descriptor))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SPH_Descriptor)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Record_Time_L0" description="Start_Record_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/sensing_start_tai)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Sensing_Start)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Record_Time_L0" description="Stop_Record_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/sensing_stop_tai)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Sensing_Stop)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Record_Time" description="Start_Record_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/start_record_tai_time)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Time_Information/Start_Record_Time)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Record_Time" description="Stop_Record_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/stop_record_tai_time)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Time_Information/Stop_Record_Time)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_ABS_Orbit_Start" description="ABS_Orbit_Start mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/abs_orbit_start)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/ABS_Orbit_Start)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Start" description="Rel_Time_ASC_Node_Start mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/rel_time_asc_node_start)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Start)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_ABS_Orbit_Stop" description="ABS_Orbit_Stop mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/abs_orbit_stop)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/ABS_Orbit_Stop)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Stop" description="Rel_Time_ASC_Node_Stop mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/rel_time_asc_node_stop)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Stop)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Equator_Cross_Time" description="Equator_Cross_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[float(/sph/equator_cross_time_utc)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Equator_Cross_Time)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Equator_Cross_Long" description="Equator_Cross_Long mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/equator_cross_long)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Equator_Cross_Long)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Ascending_Flag" description="Ascending_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/sph/ascending_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Ascending_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Lat" description="Start_Lat mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/start_lat)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Start_Lat)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Long" description="Start_Long mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/start_long)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Start_Long)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Lat" description="Stop_Lat mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/stop_lat)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Stop_Lat)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Long" description="Stop_Long mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/stop_long)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Stop_Long)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_ISPs" description="Num_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_isps)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_Missing_ISPs" description="Num_Missing_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_missing_isps)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_Missing_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_Error_ISPs" description="Num_Error_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_error_isps)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_Error_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_Discarded_ISPs" description="Num_Discarded_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_discarded_isps)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_Discarded_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_RS_ISPs" description="Num_RS_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_rs_isps)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_RS_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_RS_Corrections" description="Num_RS_Corrections mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_rs_corrections)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_RS_Corrections)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Instrument_ID" description="Instrument_ID mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/sph/instr_id))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Instrument_ID)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Proc_Flag" description="L0_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l0_proc_flag)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Processing_Quality" description="L0_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l0_processing_quality)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Proc_Thresh" description="L0_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l0_proc_thresh)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Gaps_Flag" description="L0_Gaps_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l0_gaps_flag)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Gaps_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Gaps_Num" description="L0_Gaps_Num mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l0_gaps_num)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Gaps_Num)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SIR_Op_Mode" description="SIR_Op_Mode mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/sph/sir_op_mode)) + substr(0, 10 - length(trim(str(/sph/sir_op_mode))), "__________")]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Instrument_Configuration/SIR_Op_Mode)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SIR_Configuration" description="SIR_Configuration mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/sph/sir_configuration)) + substr(0, 7 - length(trim(str(/sph/sir_configuration))), "_______")]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Instrument_Configuration/SIR_Configuration)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Open_Ocean_Percent" description="Open_Ocean_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/open_ocean_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Open_Ocean_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Close_Sea_Percent" description="Close_Sea_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/close_sea_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Close_Sea_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Continent_Ice_Percent" description="Continent_Ice_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/continent_ice_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Continent_Ice_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Land_Percent" description="Land_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/land_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Land_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Prod_Status" description="L1B_Prod_Status mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1b_prod_status)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Prod_Status)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Proc_Flag" description="L1B_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1b_proc_flag)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Processing_Quality" description="L1B_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1b_processing_quality)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Proc_Thresh" description="L1B_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1b_proc_thresh)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Proc_Flag" description="L1_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1_proc_flag)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Processing_Quality" description="L1_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1_processing_quality)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Proc_Thresh" description="L1_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l1_proc_thresh)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_L1_DSR_Processed" description="Num_L1_DSR_Processed mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/num_l1_dsr_proc)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/Num_L1_DSR_Processed)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Instrument_Identifier" description="Instrument_Identifier mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/sph/instr_id))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Instrument_Configuration/Instrument_Identifier)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_LRM_Mode_Percent" description="LRM_Mode_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/lrm_mode_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/LRM_Mode_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SAR_Mode_Percent" description="SAR_Mode_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/sar_mode_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/SAR_Mode_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SARIN_Mode_Percent" description="SARIN_Mode_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/sarin_mode_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/SARIN_Mode_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Other_Modes_Percent" description="Other_Modes_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/other_modes_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/Other_Modes_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Open_Ocean_Percent" description="Open_Ocean_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/open_ocean_percent)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Open_Ocean_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Prod_Status" description="L2_Prod_Status mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l2_prod_status)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Prod_Status)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Proc_Flag" description="L2_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l2_proc_flag)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Processing_Quality" description="L2_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l2_processing_quality)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Proc_Thresh" description="L2_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/sph/l2_proc_thresh)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <!-- netCDF CrossFileTests -->
  <ct:CrossFileTest name="MPH_Product_NetCDF" description="Product mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@product_name))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Product)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Proc_Stage_Code_NetCDF" description="Proc_Stage_Code mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@processing_stage))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Proc_Stage_Code)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Ref_Doc_NetCDF" description="Ref_Doc mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@reference_document))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Ref_Doc)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Software_Version_NetCDF" description="Software_Version mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@software_version))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Software_Version)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Phase_NetCDF" description="Phase mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@phase))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/MPH/Phase)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Cycle_NetCDF" description="Cycle mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@cycle_number[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Cycle)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Rel_Orbit_NetCDF" description="Rel_Orbit mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@rel_orbit_number[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Rel_Orbit)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Abs_Orbit_NetCDF" description="Abs_Orbit mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@abs_orbit_number[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Abs_Orbit)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Delta_UT1_NetCDF" description="Delta_UT1 mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@delta_ut1))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Delta_UT1)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Delta_UT1_Float_NetCDF" description="Delta_UT1 mismatch (DBL float)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(/@delta_ut1[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Delta_UT1)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Delta_UT1_Float_v2_NetCDF" description="Delta_UT1 mismatch (DBL float, rounded to 0.001)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(1000.0*float(/@delta_ut1[0])-0.0005)/1000.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(1000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Delta_UT1)-0.0005)/1000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Position_NetCDF" description="X_Position mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@x_position))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Position_Float_NetCDF" description="X_Position mismatch (DBL float, rounded to 0.001)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(/@x_position[0])) % 1) / (1/16.0) % 4 == 3), if(float(/@x_position[0]) < 0,ceil(1000.0*float(/@x_position[0])-0.5),floor(1000.0*float(/@x_position[0])+0.5))/1000.0,if(float(/@x_position[0]) < 0,floor(1000.0*float(/@x_position[0])+0.5),ceil(1000.0*float(/@x_position[0])-0.5))/1000.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position) < 0,floor(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position)+0.5),ceil(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position)-0.5))/1000000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Position_Float_v2_NetCDF" description="X_Position mismatch (DBL float (GDR), rounded to 100)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(str(/@x_position))) % 1) / (1/16.0) % 4 == 3), if(float(str(/@x_position)) < 0,ceil(0.01*float(str(/@x_position))-0.5),floor(0.01*float(str(/@x_position))+0.5))*100.0,if(float(str(/@x_position)) < 0,floor(0.01*float(str(/@x_position))+0.5),ceil(0.01*float(str(/@x_position))-0.5))*100.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position) < 0,floor(0.01*float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position)+0.5),ceil(0.01*float(/Earth_Explorer_Header/Variable_Header/MPH/X_Position)-0.5))*100.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Position_NetCDF" description="Y_Position mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@y_position))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Position_Float_NetCDF" description="Y_Position mismatch (DBL float, rounded to 0.001)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(/@y_position[0])) % 1) / (1/16.0) % 4 == 3), if(float(/@y_position[0]) < 0,ceil(1000.0*float(/@y_position[0])-0.5),floor(1000.0*float(/@y_position[0])+0.5))/1000.0,if(float(/@y_position[0]) < 0,floor(1000.0*float(/@y_position[0])+0.5),ceil(1000.0*float(/@y_position[0])-0.5))/1000.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position) < 0,floor(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position)+0.5),ceil(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position)-0.5))/1000000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Position_Float_v2_NetCDF" description="Y_Position mismatch (DBL float (GDR), rounded to 100)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(str(/@y_position))) % 1) / (1/16.0) % 4 == 3), if(float(str(/@y_position)) < 0,ceil(0.01*float(str(/@y_position))-0.5),floor(0.01*float(str(/@y_position))+0.5))*100.0,if(float(str(/@y_position)) < 0,floor(0.01*float(str(/@y_position))+0.5),ceil(0.01*float(str(/@y_position))-0.5))*100.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position) < 0,floor(0.01*float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position)+0.5),ceil(0.01*float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Position)-0.5))*100.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Position_NetCDF" description="Z_Position mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@z_position))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Position_Float_NetCDF" description="Z_Position mismatch (DBL float, rounded to 0.001)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(/@z_position[0])) % 1) / (1/16.0) % 4 == 3), if(float(/@z_position[0]) < 0,ceil(1000.0*float(/@z_position[0])-0.5),floor(1000.0*float(/@z_position[0])+0.5))/1000.0,if(float(/@z_position[0]) < 0,floor(1000.0*float(/@z_position[0])+0.5),ceil(1000.0*float(/@z_position[0])-0.5))/1000.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position) < 0,floor(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position)+0.5),ceil(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position)-0.5))/1000000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Position_Float_v2_NetCDF" description="Z_Position mismatch (DBL float (GDR), rounded to 100)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(str(/@z_position))) % 1) / (1/16.0) % 4 == 3), if(float(str(/@z_position)) < 0,ceil(0.01*float(str(/@z_position))-0.5),floor(0.01*float(str(/@z_position))+0.5))*100.0,if(float(str(/@z_position)) < 0,floor(0.01*float(str(/@z_position))+0.5),ceil(0.01*float(str(/@z_position))-0.5))*100.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position) < 0,floor(0.01*float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position)+0.5),ceil(0.01*float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Position)-0.5))*100.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Velocity_NetCDF" description="X_Velocity mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@x_velocity))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Velocity_Float_NetCDF" description="X_Velocity mismatch (DBL float, rounded to 0.000001)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(/@x_velocity[0])) % 1) / (1/16000.0) % 4 == 3), if(float(/@x_velocity[0]) < 0,ceil(1000000.0*float(/@x_velocity[0])-0.5),floor(1000000.0*float(/@x_velocity[0])+0.5))/1000000.0,if(float(/@x_velocity[0]) < 0,floor(1000000.0*float(/@x_velocity[0])+0.5),ceil(1000000.0*float(/@x_velocity[0])-0.5))/1000000.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity) < 0,floor(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity)+0.5),ceil(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity)-0.5))/1000000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_X_Velocity_Float_v2_NetCDF" description="X_Velocity mismatch (DBL float (GDR), rounded to 1)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(str(/@x_velocity))) % 1) / (1/16.0) % 4 == 3), if(float(str(/@x_velocity)) < 0,ceil(float(str(/@x_velocity))-0.5),floor(float(str(/@x_velocity))+0.5)),if(float(str(/@x_velocity)) < 0,floor(float(str(/@x_velocity))+0.5),ceil(float(str(/@x_velocity))-0.5)))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity) < 0,floor(float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity)+0.5),ceil(float(/Earth_Explorer_Header/Variable_Header/MPH/X_Velocity)-0.5))]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Velocity_NetCDF" description="Y_Velocity mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@y_velocity))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Velocity_Float_NetCDF" description="Y_Velocity mismatch (DBL float, rounded to 0.000001)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(/@y_velocity[0])) % 1) / (1/16000.0) % 4 == 3), if(float(/@y_velocity[0]) < 0,ceil(1000000.0*float(/@y_velocity[0])-0.5),floor(1000000.0*float(/@y_velocity[0])+0.5))/1000000.0,if(float(/@y_velocity[0]) < 0,floor(1000000.0*float(/@y_velocity[0])+0.5),ceil(1000000.0*float(/@y_velocity[0])-0.5))/1000000.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity) < 0,floor(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity)+0.5),ceil(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity)-0.5))/1000000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Y_Velocity_Float_v2_NetCDF" description="Y_Velocity mismatch (DBL float (GDR), rounded to 1)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(str(/@y_velocity))) % 1) / (1/16.0) % 4 == 3), if(float(str(/@y_velocity)) < 0,ceil(float(str(/@y_velocity))-0.5),floor(float(str(/@y_velocity))+0.5)),if(float(str(/@y_velocity)) < 0,floor(float(str(/@y_velocity))+0.5),ceil(float(str(/@y_velocity))-0.5)))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity) < 0,floor(float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity)+0.5),ceil(float(/Earth_Explorer_Header/Variable_Header/MPH/Y_Velocity)-0.5))]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Velocity_NetCDF" description="Z_Velocity mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@z_velocity))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Velocity_Float_NetCDF" description="Z_Velocity mismatch (DBL float, rounded to 0.000001)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(/@z_velocity[0])) % 1) / (1/16000.0) % 4 == 3), if(float(/@z_velocity[0]) < 0,ceil(1000000.0*float(/@z_velocity[0])-0.5),floor(1000000.0*float(/@z_velocity[0])+0.5))/1000000.0,if(float(/@z_velocity[0]) < 0,floor(1000000.0*float(/@z_velocity[0])+0.5),ceil(1000000.0*float(/@z_velocity[0])-0.5))/1000000.0)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity) < 0,floor(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity)+0.5),ceil(1000000.0*float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity)-0.5))/1000000.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Z_Velocity_Float_v2_NetCDF" description="Z_Velocity mismatch (DBL float (GDR), rounded to 1)" criticality="Warning">
    <!-- The following expression is needed to overcome problems with a missing round function in coda, in combination with dbl values that are on the rounding edge .xxx5 -->
    <ct:ValueExpressionDbl><![CDATA[if(((abs(float(str(/@z_velocity))) % 1) / (1/16.0) % 4 == 3), if(float(str(/@z_velocity)) < 0,ceil(float(str(/@z_velocity))-0.5),floor(float(str(/@z_velocity))+0.5)),if(float(str(/@z_velocity)) < 0,floor(float(str(/@z_velocity))+0.5),ceil(float(str(/@z_velocity))-0.5)))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity) < 0,floor(float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity)+0.5),ceil(float(/Earth_Explorer_Header/Variable_Header/MPH/Z_Velocity)-0.5))]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_State_Vector_Source_NetCDF" description="State_Vector_Source mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@vector_source))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[if(str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source) == "FP", "fos_predicted", if(str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source) == "DN" , "doris_navigator", if(str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source) == "DP", "doris_precise", if(str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source) == "FR", "fos_restituted",if(str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source) == "DI", "doris_preliminary", str(/Earth_Explorer_Header/Variable_Header/MPH/State_Vector_Source))))))]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Product_Err_NetCDF" description="Product_Err mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(str(/@product_err))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Product_Err)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="MPH_Tot_Size_NetCDF" description="Tot_Size mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@tot_size[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/MPH/Tot_Size)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Record_Time_NetCDF" description="Start_Record_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[if(length(/@first_record_time) == 0, nan, if(str(/@first_record_time, 30) == "TAI=9999-99-99T99:99:99.999999", +inf, if(str(/@first_record_time, 30) == "TAI=0000-00-00T00:00:00.000000", -inf, time(str(/@first_record_time), "'TAI='yyyy-MM-dd'T'HH:mm:ss.SSSSSS"))))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Time_Information/Start_Record_Time)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Record_Time_NetCDF" description="Stop_Record_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[if(length(/@last_record_time) == 0, nan, if(str(/@last_record_time, 30) == "TAI=9999-99-99T99:99:99.999999", +inf, if(str(/@last_record_time, 30) == "TAI=0000-00-00T00:00:00.000000", -inf, time(str(/@last_record_time), "'TAI='yyyy-MM-dd'T'HH:mm:ss.SSSSSS"))))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Time_Information/Stop_Record_Time)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_ABS_Orbit_Start_NetCDF" description="ABS_Orbit_Start mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@abs_orbit_start[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/ABS_Orbit_Start)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Start_NetCDF" description="Rel_Time_ASC_Node_Start mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@rel_time_acs_node_start))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Start)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Start_v2_NetCDF" description="Rel_Time_ASC_Node_Start mismatch (DBL ASC, rounded up to 0.1)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(10.0*float(str(/@rel_time_asc_node_start))-0.05)/10.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(10.0*float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Start)-0.05)/10.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Start_v3_NetCDF" description="Rel_Time_ASC_Node_Start mismatch (DBL ACS, rounded up to 0.1)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(10.0*float(/@rel_time_acs_node_start[0])-0.05)/10.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(10.0*float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Start)-0.05)/10.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Start_v4_NetCDF" description="Rel_Time_ASC_Node_Start mismatch (DBL ACS (GDR), rounded up to 0.1)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(10.0*float(str(/@rel_time_acs_node_start))-0.05)/10.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(10.0*float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Start)-0.05)/10.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_ABS_Orbit_Stop_NetCDF" description="ABS_Orbit_Stop mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@abs_orbit_stop[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/ABS_Orbit_Stop)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Stop_NetCDF" description="Rel_Time_ASC_Node_Stop mismatch" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[float(str(/@rel_time_acs_node_stop))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Stop)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Stop_v2_NetCDF" description="Rel_Time_ASC_Node_Stop mismatch (DBL ASC, rounded up to 0.1)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(10.0*float(str(/@rel_time_asc_node_stop))-0.05)/10.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(10.0*float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Stop)-0.05)/10.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Stop_v3_NetCDF" description="Rel_Time_ASC_Node_Stop mismatch (DBL ACS, rounded up to 0.1)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(10.0*float(/@rel_time_acs_node_stop[0])-0.05)/10.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(10.0*float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Stop)-0.05)/10.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Rel_Time_ASC_Node_Stop_v4_NetCDF" description="Rel_Time_ASC_Node_Stop mismatch (DBL ACS (GDR), rounded up to 0.1)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[ceil(10.0*float(str(/@rel_time_acs_node_stop))-0.05)/10.0]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[ceil(10.0*float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Rel_Time_ASC_Node_Stop)-0.05)/10.0]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Equator_Cross_Time_NetCDF" description="Equator_Cross_Time mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[if(length(/@equator_cross_time) == 0, nan, if(str(/@equator_cross_time, 30) == "UTC=9999-99-99T99:99:99.999999", +inf, if(str(/@equator_cross_time, 30) == "UTC=0000-00-00T00:00:00.000000", -inf, time(str(/@equator_cross_time), "'UTC='yyyy-MM-dd'T'HH:mm:ss.SSSSSS"))))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[float(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Equator_Cross_Time)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Equator_Cross_Long_NetCDF" description="Equator_Cross_Long mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@equator_cross_long[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Equator_Cross_Long)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Ascending_Flag_NetCDF" description="Ascending_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@ascending_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Orbit_Information/Ascending_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Lat_NetCDF" description="Start_Lat mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@first_record_lat[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Start_Lat)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Start_Long_NetCDF" description="Start_Long mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@first_record_lon[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Start_Long)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Lat_NetCDF" description="Stop_Lat mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@last_record_lat[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Stop_Lat)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Stop_Long_NetCDF" description="Stop_Long mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@last_record_lon[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Location/Stop_Long)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_ISPs_NetCDF" description="Num_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_isps[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_Missing_ISPs_NetCDF" description="Num_Missing_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_missing_isps[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_Missing_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_Error_ISPs_NetCDF" description="Num_Error_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_error_isps[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_Error_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_Discarded_ISPs_NetCDF" description="Num_Discarded_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_discarded_isps[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_Discarded_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_RS_ISPs_NetCDF" description="Num_RS_ISPs mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_rs_isps[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_RS_ISPs)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_RS_Corrections_NetCDF" description="Num_RS_Corrections mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_rs_corrections[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Product_Confidence_Data/Num_RS_Corrections)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Instrument_ID_NetCDF" description="Instrument_ID mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@instr_id))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Instrument_ID)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Proc_Flag_NetCDF" description="L0_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l0_proc_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Processing_Quality_NetCDF" description="L0_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l0_processing_quality[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Proc_Thresh_NetCDF" description="L0_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l0_proc_thresh[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Gaps_Flag_NetCDF" description="L0_Gaps_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l0_gaps_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Gaps_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L0_Gaps_Num_NetCDF" description="L0_Gaps_Num mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l0_gaps_num[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_0_Confidence_Data/L0_Gaps_Num)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SIR_Op_Mode_NetCDF" description="SIR_Op_Mode mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@sir_op_mode)) + substr(0, 10 - length(trim(str(/@sir_op_mode))), "__________")]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Instrument_Configuration/SIR_Op_Mode)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SIR_Configuration_NetCDF" description="SIR_Configuration mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@sir_configuration)) + substr(0, 7 - length(trim(str(/@sir_configuration))), "_______")]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Instrument_Configuration/SIR_Configuration)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Open_Ocean_Percent_NetCDF" description="Open_Ocean_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@open_ocean_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Open_Ocean_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Close_Sea_Percent_NetCDF" description="Close_Sea_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@close_sea_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Close_Sea_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Continent_Ice_Percent_NetCDF" description="Continent_Ice_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@continent_ice_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Continent_Ice_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Land_Percent_NetCDF" description="Land_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@land_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Land_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Prod_Status_NetCDF" description="L1B_Prod_Status mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l1b_prod_status))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Prod_Status)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Proc_Flag_NetCDF" description="L1B_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l1b_proc_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Processing_Quality_NetCDF" description="L1B_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l1b_processing_quality[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1B_Proc_Thresh_NetCDF" description="L1B_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l1b_proc_thresh[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1B_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Proc_Flag_NetCDF" description="L1_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l1b_proc_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Processing_Quality_NetCDF" description="L1_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l1b_processing_quality[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Processing_Quality_Warning_NetCDF" description="L1_Processing_Quality mismatch (warning)" criticality="Warning">
    <ct:ValueExpressionDbl><![CDATA[int(/@l1b_processing_quality[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L1_Proc_Thresh_NetCDF" description="L1_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l1b_proc_thresh[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/L1_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Num_L1_DSR_Processed_NetCDF" description="Num_L1_DSR_Processed mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@num_l1_dsr_proc)]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_1_Confidence_Data/Num_L1_DSR_Processed)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Instrument_Identifier_NetCDF" description="Instrument_Identifier mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@instr_id))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Instrument_Configuration/Instrument_Identifier)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_LRM_Mode_Percent_NetCDF" description="LRM_Mode_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@lrm_mode_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/LRM_Mode_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SAR_Mode_Percent_NetCDF" description="SAR_Mode_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@sar_mode_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/SAR_Mode_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_SARIN_Mode_Percent_NetCDF" description="SARIN_Mode_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@sarin_mode_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/SARIN_Mode_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Other_Modes_Percent_NetCDF" description="Other_Modes_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@other_modes_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/SIR_Mode_Statistics/Other_Modes_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_Open_Ocean_Percent_NetCDF" description="Open_Ocean_Percent mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@open_ocean_percent[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Surface_Statistics/Open_Ocean_Percent)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Prod_Status_NetCDF" description="L2_Prod_Status mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l2_prod_status))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Prod_Status)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Proc_Flag_NetCDF" description="L2_Proc_Flag mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[trim(str(/@l2_proc_flag))]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[str(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Proc_Flag)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Processing_Quality_NetCDF" description="L2_Processing_Quality mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l2_processing_quality[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Processing_Quality)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
  <ct:CrossFileTest name="SPH_L2_Proc_Thresh_NetCDF" description="L2_Proc_Thresh mismatch" criticality="Error">
    <ct:ValueExpressionDbl><![CDATA[int(/@l2_proc_thresh[0])]]></ct:ValueExpressionDbl>
    <ct:ValueExpressionHdr><![CDATA[int(/Earth_Explorer_Header/Variable_Header/SPH/Level_2_Confidence_Data/L2_Proc_Thresh)]]></ct:ValueExpressionHdr>
  </ct:CrossFileTest>
</ct:Tests>
